var Promise = require("bluebird");
var express = require('express');
var path = require('path');
var app = express();
var CORS = require('cors')();

app.use(CORS);

app.use(express.static(path.join(__dirname, 'html')));

app.use('/js_module', express.static(__dirname + "/js_module"));

app.use('/iconfont', express.static(__dirname + "/iconfont"));

//Web Server용
app.get('/', function(req, res) {
    res.sendFile(path.join(__dirname, 'html', 'ess.html'));
});

app.get('/2', function(req, res) {
    res.sendFile(path.join(__dirname, 'html', 'ess2.html'));
});

app.get("/current_kwh", function(req, res) {
    if (mongoconnected) {
        if (res_kwh.alive < 10)
            res.json(res_kwh);
        else {
            check_kwh().then(function(databack) {
                //console.log(total);
                res.json(databack);
            });
        }
    } else {
        res.json(res_kwh);
    }
});

app.get("/current_kwhq", function(req, res) {
    if (mongoconnected) {
        if (res_kwhq.alive < 10)
            res.json(res_kwhq);
        else {
            check_kwhq().then(function(databack) {
                //console.log(total);
                res.json(databack);
            });
        }
    } else {
        res.json(res_kwhq);
    }
});


app.get("/log_month", function(req, res) {
    var spl = req.query.date.split("_");
    console.log("0=" + spl[0]);
    console.log("1=" + spl[1]);
    var mt = Number(spl[0]) - 1;
    var yt = Number(spl[1]);
    var mon = new Date(yt, mt, 1);

    var logmonth = moment(mon);
    console.log(logmonth);

    log_monthly(logmonth).then(function(total) {
        //console.log(total);
        res.json(total);
    });
});


function log_monthly(month) {
    return new Promise(function(resolve, reject) {
        console.log(month.format());
        var t1 = new Date(month.format());
        var t2 = new Date(month.format());
        console.log(t1);
        console.log(t2);
        t2.setMonth(t1.getMonth() + 1);
        var res_month = {
            solar: 0,
            ph1_load: 0,
            ph2_load: 0,
            ph3_load: 0,
            ph1_power: 0,
            ph2_power: 0,
            ph3_power: 0,
            battery: 0,
            arr_solar: [],
            arr_datetimes: [],
            arr_ph1_load: [],
            arr_ph2_load: [],
            arr_ph3_load: [],
            arr_ph1_power: [],
            arr_ph2_power: [],
            arr_ph3_power: [],
            arr_battery: [],
            arr_battery_power: []
        };
        // 조회일의 00시부터 현재 시간까지 시간별 Kwh데이터를 쿼리한다.
        var qr = {
            "datetime": {
                $gte: new Date(t1.getFullYear(), t1.getMonth(), 1, 0, 0),
                $lt: new Date(t2.getFullYear(), t2.getMonth(), 1, 0, 0)
            }
        };
        //console.log("월간별 log조회를 시작한다.");
        //console.log(qr);
        mdb.collection('sum_d').find(qr).toArray(function(err, result) {
            if (err) console.log(err); //throw err;
            else {
                if (result.length > 0) {
                    //console.log("sum_d에서" + result.length + "개가 조회됨");
                    result.forEach(function(el, idx, arr) {
                        res_month.solar += Number(el.Solar_input_power_1);
                        res_month.ph1_load += Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_month.ph2_load += Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_month.ph3_load += Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_month.ph1_power += Number(el.ph1_power);
                        res_month.ph2_power += Number(el.ph2_power);
                        res_month.ph3_power += Number(el.ph3_power);
                        res_month.battery += Number(el.Battery_capacity);
                        res_month.arr_datetimes.push(el.datetime);
                        res_month.arr_solar.push(Number(el.Solar_input_power_1));
                        res_month.arr_ph1_load.push(Number(el.ph1_load));
                        res_month.arr_ph2_load.push(Number(el.ph2_load));
                        res_month.arr_ph3_load.push(Number(el.ph3_load));
                        res_month.arr_ph1_power.push(Number(el.ph1_power));
                        res_month.arr_ph2_power.push(Number(el.ph2_power));
                        res_month.arr_ph3_power.push(Number(el.ph3_power));
                        res_month.arr_battery.push(Number(el.Battery_capacity));
                        res_month.arr_battery_power.push(Number(el.Battery_Power));
                    });
                    //resolve(JSON.stringify(res_month));
                    resolve(res_month);
                } else console.log("해당 월의 sum_d의 " + qr + "에서 데이터가 조회되지 않음");
            }
        });
    });
}

app.get("/log_day", function(req, res) {
    //console.log(req.query.date);
    var logday = moment(req.query.date);
    //console.log(logday);

    log_daily(logday).then(function(total) {
        //console.log(total);
        res.json(total);
    });
});

function log_daily(day) {
    return new Promise(function(resolve, reject) {
        var t1 = new Date(day.format());
        var t2 = new Date(day.format());
        t2.setDate(t1.getDate() + 1);
        var res_day = {
            solar: 0,
            ph1_load: 0,
            ph2_load: 0,
            ph3_load: 0,
            ph1_power: 0,
            ph2_power: 0,
            ph3_power: 0,
            battery: 0,
            arr_solar: [],
            arr_datetimes: [],
            arr_ph1_load: [],
            arr_ph2_load: [],
            arr_ph3_load: [],
            arr_ph1_power: [],
            arr_ph2_power: [],
            arr_ph3_power: [],
            arr_battery: [],
            arr_battery_power: []
        };
        // 조회일의 00시부터 현재 시간까지 시간별 Kwh데이터를 쿼리한다.
        var qr = {
            "datetime": {
                $gte: new Date(t1.getFullYear(), t1.getMonth(), t1.getDate(), 0, 0),
                $lt: new Date(t2.getFullYear(), t2.getMonth(), t2.getDate(), 0, 2)
            }
        };
        //console.log("일간별 log조회를 시작한다.");
        //console.log(qr);
        mdb.collection('sum_q').find(qr).toArray(function(err, result) {
            //mdb.collection('sum_h').find(qr).toArray.then(function(err, result) {
            if (err) console.log(err); //throw err;
            else {
                if (result.length > 0) {
                    //console.log("sum_h에서" + result.length + "개가 조회됨");
                    result.forEach(function(el, idx, arr) {
                        //console.log(el);
                        res_day.solar += Number(el.Solar_input_power_1);
                        res_day.ph1_load += Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_day.ph2_load += Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_day.ph3_load += Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_day.ph1_power += Number(el.ph1_power);
                        res_day.ph2_power += Number(el.ph2_power);
                        res_day.ph3_power += Number(el.ph3_power);
                        res_day.battery += Number(el.Battery_capacity);
                        res_day.arr_datetimes.push(el.datetime);
                        res_day.arr_solar.push(Number(el.Solar_input_power_1));
                        res_day.arr_ph1_load.push(Number(el.ph1_load));
                        res_day.arr_ph2_load.push(Number(el.ph2_load));
                        res_day.arr_ph3_load.push(Number(el.ph3_load));
                        res_day.arr_ph1_power.push(Number(el.ph1_power));
                        res_day.arr_ph2_power.push(Number(el.ph2_power));
                        res_day.arr_ph3_power.push(Number(el.ph3_power));
                        res_day.arr_battery.push(Number(el.Battery_capacity));
                        res_day.arr_battery_power.push(Number(el.Battery_Power));
                    });
                    //resolve(JSON.stringify(res_day));
                    resolve(res_day);

                } else console.log("해당 날짜의 sum_q의 " + qr + "에서 데이터가 조회되지 않음");
            }
        });
    });
}

// ESS 현재 상태 알려줌
app.get("/current_ess", function(req, res) {
    var battery_pwr, ph1_load, ph2_load, ph3_load;
    var res_ess = {
        datetime: new Date(),
        Solar_input_voltage_1: 0,
        Solar_input_power_1: 0,
        Battery_voltage: 0,
        Battery_capacity: 0,
        Battery_current: 0,
        Battery_Power: 0,
        ph1_volt: 0,
        ph2_volt: 0,
        ph3_volt: 0,
        ph1_current: 0,
        ph2_current: 0,
        ph3_current: 0,
        ph1_power: 0,
        ph2_power: 0,
        ph3_power: 0,
        ph1_powerVA: 0,
        ph2_powerVA: 0,
        ph3_powerVA: 0,
        ph1_load: 0,
        ph2_load: 0,
        ph3_load: 0,
        ph1_amp_reactive: 0,
        ph2_amp_reactive: 0,
        ph3_amp_reactive: 0,
        ph1_pf: 0,
        ph2_pf: 0,
        ph3_pf: 0
    };
    if (value_gs.Alive < time_out && value_mb.Alive < time_out) {
        battery_pwr = value_gs.Battery_voltage * value_gs.Battery_current;
        ph1_load = value_mb.ph1_power + (value_gs.Solar_input_power_1 / 3) - (battery_pwr / 3);
        ph2_load = value_mb.ph2_power + (value_gs.Solar_input_power_1 / 3) - (battery_pwr / 3);
        ph3_load = value_mb.ph3_power + (value_gs.Solar_input_power_1 / 3) - (battery_pwr / 3);
        res_ess.datetime = new Date();
        res_ess.Solar_input_voltage_1 = Number(value_gs.Solar_input_voltage_1.toFixed(2));
        res_ess.Solar_input_power_1 = Number(value_gs.Solar_input_power_1.toFixed(2));
        res_ess.Battery_voltage = Number(value_gs.Battery_voltage.toFixed(2));
        res_ess.Battery_capacity = Number(value_gs.Battery_capacity.toFixed(2));
        res_ess.Battery_current = Number(value_gs.Battery_current.toFixed(2));
        res_ess.Battery_Power = Number(battery_pwr.toFixed(2));
        res_ess.ph1_volt = Number(value_mb.ph1_volt.toFixed(2));
        res_ess.ph2_volt = Number(value_mb.ph2_volt.toFixed(2));
        res_ess.ph3_volt = Number(value_mb.ph3_volt.toFixed(2));
        res_ess.ph1_current = Number(value_mb.ph1_current.toFixed(2));
        res_ess.ph2_current = Number(value_mb.ph2_current.toFixed(2));
        res_ess.ph3_current = Number(value_mb.ph3_current.toFixed(2));
        res_ess.ph1_power = Number(value_mb.ph1_power.toFixed(2));
        res_ess.ph2_power = Number(value_mb.ph2_power.toFixed(2));
        res_ess.ph3_power = Number(value_mb.ph3_power.toFixed(2));
        res_ess.ph1_powerVA = Number(value_mb.ph1_powerVA.toFixed(2));
        res_ess.ph2_powerVA = Number(value_mb.ph2_powerVA.toFixed(2));
        res_ess.ph3_powerVA = Number(value_mb.ph3_powerVA.toFixed(2));
        res_ess.ph1_load = Number(ph1_load.toFixed(2));
        res_ess.ph2_load = Number(ph2_load.toFixed(2));
        res_ess.ph3_load = Number(ph3_load.toFixed(2));
        res_ess.ph1_amp_reactive = Number(value_mb.ph1_amp_reactive.toFixed(2));
        res_ess.ph2_amp_reactive = Number(value_mb.ph2_amp_reactive.toFixed(2));
        res_ess.ph3_amp_reactive = Number(value_mb.ph3_amp_reactive.toFixed(2));
        res_ess.ph1_pf = Number(value_mb.ph1_pf.toFixed(2));
        res_ess.ph2_pf = Number(value_mb.ph2_pf.toFixed(2));
        res_ess.ph3_pf = Number(value_mb.ph3_pf.toFixed(2));
    } else if (value_gs.Alive > time_out && value_mb.Alive < time_out) {
        res_ess.datetime = new Date();
        res_ess.Solar_input_voltage_1 = 0;
        res_ess.Solar_input_power_1 = 0;
        res_ess.Battery_voltage = 0;
        res_ess.Battery_capacity = 0;
        res_ess.Battery_current = 0;
        res_ess.Battery_Power = 0;

        res_ess.ph1_volt = Number(value_mb.ph1_volt.toFixed(2));
        res_ess.ph2_volt = Number(value_mb.ph2_volt.toFixed(2));
        res_ess.ph3_volt = Number(value_mb.ph3_volt.toFixed(2));
        res_ess.ph1_current = Number(value_mb.ph1_current.toFixed(2));
        res_ess.ph2_current = Number(value_mb.ph2_current.toFixed(2));
        res_ess.ph3_current = Number(value_mb.ph3_current.toFixed(2));
        res_ess.ph1_power = Number(value_mb.ph1_power.toFixed(2));
        res_ess.ph2_power = Number(value_mb.ph2_power.toFixed(2));
        res_ess.ph3_power = Number(value_mb.ph3_power.toFixed(2));
        res_ess.ph1_powerVA = Number(value_mb.ph1_powerVA.toFixed(2));
        res_ess.ph2_powerVA = Number(value_mb.ph2_powerVA.toFixed(2));
        res_ess.ph3_powerVA = Number(value_mb.ph3_powerVA.toFixed(2));
        res_ess.ph1_load = Number(value_mb.ph1_power.toFixed(2));
        res_ess.ph2_load = Number(value_mb.ph2_power.toFixed(2));
        res_ess.ph3_load = Number(value_mb.ph3_power.toFixed(2));
        res_ess.ph1_amp_reactive = Number(value_mb.ph1_amp_reactive.toFixed(2));
        res_ess.ph2_amp_reactive = Number(value_mb.ph2_amp_reactive.toFixed(2));
        res_ess.ph3_amp_reactive = Number(value_mb.ph3_amp_reactive.toFixed(2));
        res_ess.ph1_pf = Number(value_mb.ph1_pf.toFixed(2));
        res_ess.ph2_pf = Number(value_mb.ph2_pf.toFixed(2));
        res_ess.ph3_pf = Number(value_mb.ph3_pf.toFixed(2));
    } else if (value_gs.Alive < time_out && value_mb.Alive > time_out) {
        res_ess.datetime = new Date();
        res_ess.Solar_input_voltage_1 = Number(value_gs.Solar_input_voltage_1.toFixed(2));
        res_ess.Solar_input_power_1 = Number(value_gs.Solar_input_power_1.toFixed(2));
        res_ess.Battery_voltage = Number(value_gs.Battery_voltage.toFixed(2));
        res_ess.Battery_capacity = Number(value_gs.Battery_capacity.toFixed(2));
        res_ess.Battery_current = Number(value_gs.Battery_current.toFixed(2));
        res_ess.Battery_Power = Number((value_gs.Battery_voltage * value_gs.Battery_current).toFixed(2));
        res_ess.ph1_volt = 0;
        res_ess.ph2_volt = 0;
        res_ess.ph3_volt = 0;
        res_ess.ph1_current = 0;
        res_ess.ph2_current = 0;
        res_ess.ph3_current = 0;
        res_ess.ph1_power = 0;
        res_ess.ph2_power = 0;
        res_ess.ph3_power = 0;
        res_ess.ph1_powerVA = 0;
        res_ess.ph2_powerVA = 0;
        res_ess.ph3_powerVA = 0;
        res_ess.ph1_load = 0;
        res_ess.ph2_load = 0;
        res_ess.ph3_load = 0;
        res_ess.ph1_amp_reactive = 0;
        res_ess.ph2_amp_reactive = 0;
        res_ess.ph3_amp_reactive = 0;
        res_ess.ph1_pf = 0;
        res_ess.ph2_pf = 0;
        res_ess.ph3_pf = 0;
    } else {
        res_ess.datetime = new Date();
        res_ess.Solar_input_voltage_1 = 0;
        res_ess.Solar_input_power_1 = 0;
        res_ess.Battery_voltage = 0;
        res_ess.Battery_capacity = 0;
        res_ess.Battery_current = 0;
        res_ess.Battery_Power = 0;
        res_ess.ph1_volt = 0;
        res_ess.ph2_volt = 0;
        res_ess.ph3_volt = 0;
        res_ess.ph1_current = 0;
        res_ess.ph2_current = 0;
        res_ess.ph3_current = 0;
        res_ess.ph1_power = 0;
        res_ess.ph2_power = 0;
        res_ess.ph3_power = 0;
        res_ess.ph1_powerVA = 0;
        res_ess.ph2_powerVA = 0;
        res_ess.ph3_powerVA = 0;
        res_ess.ph1_load = 0;
        res_ess.ph2_load = 0;
        res_ess.ph3_load = 0;
        res_ess.ph1_amp_reactive = 0;
        res_ess.ph2_amp_reactive = 0;
        res_ess.ph3_amp_reactive = 0;
        res_ess.ph1_pf = 0;
        res_ess.ph2_pf = 0;
        res_ess.ph3_pf = 0;
    }
    res.json(res_ess);

});

app.listen(8080, function() {
    console.log('Express App on port 8080!');
});
//var mongodb = require('mongodb');
var mongodb = Promise.promisifyAll(require("mongodb"));
var MongoClient = mongodb.MongoClient;
//var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/mydb";

var mdb = null;

var mongoconnected = false;
MongoClient.connect(url, function(err, db) {
    if (err) {
        console.log("ERROR : " + err); //throw err;
    }
    mdb = db;
    mongoconnected = true;
    console.log("MongoDB Connected!");
    //check_kwh().then(function(total) {
    //    console.log(total);
    //});
});

var res_kwh = {
    solar: 0,
    ph1_load: 0,
    ph2_load: 0,
    ph3_load: 0,
    ph1_power: 0,
    ph2_power: 0,
    ph3_power: 0,
    battery: 0,
    arr_solar: [],
    arr_datetimes: [],
    arr_ph1_load: [],
    arr_ph2_load: [],
    arr_ph3_load: [],
    arr_ph1_power: [],
    arr_ph2_power: [],
    arr_ph3_power: [],
    arr_battery: [],
    arr_index: [],
    alive: 999
};

var res_kwhq = {
    solar: 0,
    ph1_load: 0,
    ph2_load: 0,
    ph3_load: 0,
    ph1_power: 0,
    ph2_power: 0,
    ph3_power: 0,
    battery: 0,
    arr_solar: [],
    arr_datetimes: [],
    arr_ph1_load: [],
    arr_ph2_load: [],
    arr_ph3_load: [],
    arr_ph1_power: [],
    arr_ph2_power: [],
    arr_ph3_power: [],
    arr_battery: [],
    arr_index: [],
    alive: 999
};
var qhour_ph1_power = 0;
var qhour_ph2_power = 0;
var qhour_ph3_power = 0;
var hour_ph1_power = 0;
var hour_ph2_power = 0;
var hour_ph3_power = 0;

function check_kwhq() {
    return new Promise(function(resolve, reject) {
        var t1 = new Date();
        var t2 = new Date();
        t2.setDate(t1.getDate() + 1);
        res_kwhq = {
            solar: 0,
            ph1_load: 0,
            ph2_load: 0,
            ph3_load: 0,
            ph1_power: 0,
            ph2_power: 0,
            ph3_power: 0,
            battery: 0,
            arr_solar: [],
            arr_datetimes: [],
            arr_ph1_load: [],
            arr_ph2_load: [],
            arr_ph3_load: [],
            arr_ph1_power: [],
            arr_ph2_power: [],
            arr_ph3_power: [],
            arr_battery: [],
            arr_index: [],
            arr_battery_power: [],
            alive: 0
        };

        // 오늘 00시부터 현재 시간까지 시간별 Kwh데이터를 쿼리한다.
        var qr = {
            "datetime": {
                $gte: new Date(t1.getFullYear(), t1.getMonth(), t1.getDate(), 0, 0),
                $lt: new Date(t2.getFullYear(), t2.getMonth(), t2.getDate(), 0, 1)
            }
        };
        //console.log(qr);
        mdb.collection('sum_q').find(qr).toArray(function(err, result) {
            //mdb.collection('sum_h').find(qr).toArray.then(function(err, result) {
            if (err) console.log(err); //throw err;
            else {
                if (result.length > 0) {
                    //console.log("check_kwhq 시간별 조회");
                    //console.log("sum_q에서" + result.length + "개가 조회됨");
                    result.forEach(function(el, idx, arr) {
                        res_kwhq.solar += Number(el.Solar_input_power_1);
                        res_kwhq.ph1_load += Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_kwhq.ph2_load += Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        res_kwhq.ph3_load += Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                        //total.ph1_load += Number(el.ph1_load);
                        //total.ph2_load += Number(el.ph2_load);
                        //total.ph3_load += Number(el.ph3_load);
                        res_kwhq.ph1_power += Number(el.ph1_power);
                        res_kwhq.ph2_power += Number(el.ph2_power);
                        res_kwhq.ph3_power += Number(el.ph3_power);
                        res_kwhq.battery += Number(el.Battery_capacity);
                        res_kwhq.arr_datetimes.push(el.datetime);
                        res_kwhq.arr_solar.push(Number(Number(el.Solar_input_power_1).toFixed(2)));
                        res_kwhq.arr_ph1_load.push(Number((Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        res_kwhq.arr_ph2_load.push(Number((Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        res_kwhq.arr_ph3_load.push(Number((Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        //total.arr_ph1_load.push(Number(el.ph1_load));
                        //total.arr_ph2_load.push(Number(el.ph2_load));
                        //total.arr_ph3_load.push(Number(el.ph3_load));
                        res_kwhq.arr_ph1_power.push(Number(Number(el.ph1_power).toFixed(2)));
                        res_kwhq.arr_ph2_power.push(Number(Number(el.ph2_power).toFixed(2)));
                        res_kwhq.arr_ph3_power.push(Number(Number(el.ph3_power).toFixed(2)));
                        res_kwhq.arr_battery.push(Number(Number(el.Battery_capacity).toFixed(2)));
                        res_kwhq.arr_battery_power.push(Number(el.Battery_Power).toFixed(2));
                        res_kwhq.arr_index.push(el.index);
                        //res_kwhq.arr_index.push(Number(el.index));
                    });
                    var tmp_solar;
                    var tmp_bat_pwr;
                    var tmp_bat_cap;
                    if (value_gs_aq.cnt > 0) {
                        tmp_solar = value_gs_aq.Solar_input_power_1 / value_gs_aq.cnt;
                        tmp_bat_pwr = (value_gs_aq.Battery_voltage / value_gs_aq.cnt) * (value_gs_aq.Battery_current / value_gs_aq.cnt);
                        tmp_bat_cap = value_gs_aq.Battery_capacity / value_gs_aq.cnt;
                    } else {
                        tmp_solar = 0;
                        tmp_bat_pwr = 0;
                        tmp_bat_cap = 0;
                    }
                    var tmp_ph1_pwr;
                    var tmp_ph2_pwr;
                    var tmp_ph3_pwr;

                    if (value_mb_aq.cnt > 0) {

                        tmp_ph1_pwr = value_mb_aq.ph1_power / value_mb_aq.cnt;
                        tmp_ph2_pwr = value_mb_aq.ph2_power / value_mb_aq.cnt;
                        tmp_ph3_pwr = value_mb_aq.ph3_power / value_mb_aq.cnt;
                        qhour_ph1_power = tmp_ph1_pwr;
                        qhour_ph2_power = tmp_ph2_pwr;
                        qhour_ph3_power = tmp_ph3_pwr;
                    } else {
                        tmp_ph1_pwr = 0;
                        tmp_ph2_pwr = 0;
                        tmp_ph3_pwr = 0;
                    }
                    var tmp_ph1_load = tmp_ph1_pwr + (tmp_solar / 3) - (tmp_bat_pwr / 3);
                    var tmp_ph2_load = tmp_ph2_pwr + (tmp_solar / 3) - (tmp_bat_pwr / 3);
                    var tmp_ph3_load = tmp_ph3_pwr + (tmp_solar / 3) - (tmp_bat_pwr / 3);

                    var d = new Date();


                    res_kwhq.solar += tmp_solar;
                    res_kwhq.ph1_load += tmp_ph1_load;
                    res_kwhq.ph2_load += tmp_ph2_load;
                    res_kwhq.ph3_load += tmp_ph3_load;
                    res_kwhq.ph1_power += tmp_ph1_pwr;
                    res_kwhq.ph2_power += tmp_ph2_pwr;
                    res_kwhq.ph3_power += tmp_ph3_pwr;
                    res_kwhq.battery += value_gs_aq.Battery_capacity / value_gs_aq.cnt;
                    res_kwhq.arr_datetimes.push(new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes()));
                    res_kwhq.arr_solar.push(Number(tmp_solar.toFixed(2)));
                    res_kwhq.arr_ph1_load.push(Number(tmp_ph1_load.toFixed(2)));
                    res_kwhq.arr_ph2_load.push(Number(tmp_ph2_load.toFixed(2)));
                    res_kwhq.arr_ph3_load.push(Number(tmp_ph3_load.toFixed(2)));
                    res_kwhq.arr_ph1_power.push(Number(tmp_ph1_pwr.toFixed(2)));
                    res_kwhq.arr_ph2_power.push(Number(tmp_ph2_pwr.toFixed(2)));
                    res_kwhq.arr_ph3_power.push(Number(tmp_ph3_pwr.toFixed(2)));
                    res_kwhq.arr_battery.push(Number(tmp_bat_cap.toFixed(2)));

                    res_kwhq.solar = Number(res_kwhq.solar.toFixed(2));
                    res_kwhq.ph1_load = Number(res_kwhq.ph1_load.toFixed(2));
                    res_kwhq.ph2_load = Number(res_kwhq.ph2_load.toFixed(2));
                    res_kwhq.ph3_load = Number(res_kwhq.ph3_load.toFixed(2));
                    res_kwhq.ph1_power = Number(res_kwhq.ph1_power.toFixed(2));
                    res_kwhq.ph2_power = Number(res_kwhq.ph2_power.toFixed(2));
                    res_kwhq.ph3_power = Number(res_kwhq.ph3_power.toFixed(2));
                    res_kwhq.battery = Number(res_kwhq.battery.toFixed(2));
                    res_kwhq.arr_battery_power.push(Number(tmp_bat_pwr).toFixed(2));
                    res_kwhq.arr_index.push(Number(d.getHours() * 60 + d.getMinutes()));
                    //res_kwhq.index.push(Number(d.getHours() * 60 + d.getMinutes()));
                    resolve(res_kwhq);

                } else {
                    resolve(res_kwhq);
                    //console.log("sum_h의 " + qr + "에서 시간별 데이터가 조회되지 않음");
                }


            }
        });

    });
}


function check_kwh() {
    return new Promise(function(resolve, reject) {
        var t1 = new Date();
        var t2 = new Date();
        t2.setDate(t1.getDate() + 1);
        res_kwh = {
            solar: 0,
            ph1_load: 0,
            ph2_load: 0,
            ph3_load: 0,
            ph1_power: 0,
            ph2_power: 0,
            ph3_power: 0,
            battery: 0,
            arr_solar: [],
            arr_datetimes: [],
            arr_ph1_load: [],
            arr_ph2_load: [],
            arr_ph3_load: [],
            arr_ph1_power: [],
            arr_ph2_power: [],
            arr_ph3_power: [],
            arr_battery: [],
            alive: 0
        };

        // 오늘 00시부터 현재 시간까지 시간별 Kwh데이터를 쿼리한다.
        var qr = {
            "datetime": {
                $gte: new Date(t1.getFullYear(), t1.getMonth(), t1.getDate(), 0, 0),
                $lt: new Date(t2.getFullYear(), t2.getMonth(), t2.getDate(), 0, 0)
            }
        };
        //console.log(qr);
        mdb.collection('sum_h').find(qr).toArray(function(err, result) {
            //mdb.collection('sum_h').find(qr).toArray.then(function(err, result) {
            if (err) console.log(err); //throw err;
            else {
                if (result.length > 0) {
                    //console.log("check_kwh 시간별 조회");
                    //console.log("sum_h에서" + result.length + "개가 조회됨");
                    result.forEach(function(el, idx, arr) {
                        res_kwh.solar += Number(el.Solar_input_power_1.toFixed(2));
                        res_kwh.ph1_load += Number((Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2));
                        res_kwh.ph2_load += Number((Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2));
                        res_kwh.ph3_load += Number((Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2));
                        //total.ph1_load += Number(el.ph1_load);
                        //total.ph2_load += Number(el.ph2_load);
                        //total.ph3_load += Number(el.ph3_load);
                        res_kwh.ph1_power += Number(Number(el.ph1_power).toFixed(2));
                        res_kwh.ph2_power += Number(Number(el.ph2_power).toFixed(2));
                        res_kwh.ph3_power += Number(Number(el.ph3_power).toFixed(2));
                        res_kwh.battery += Number(Number(el.Battery_capacity).toFixed(2));
                        res_kwh.arr_datetimes.push(el.datetime);
                        res_kwh.arr_solar.push(Number(Number(el.Solar_input_power_1).toFixed(2)));
                        res_kwh.arr_ph1_load.push(Number((Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        res_kwh.arr_ph2_load.push(Number((Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        res_kwh.arr_ph3_load.push(Number((Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3)).toFixed(2)));
                        //total.arr_ph1_load.push(Number(el.ph1_load));
                        //total.arr_ph2_load.push(Number(el.ph2_load));
                        //total.arr_ph3_load.push(Number(el.ph3_load));
                        res_kwh.arr_ph1_power.push(Number(Number(el.ph1_power).toFixed(2)));
                        res_kwh.arr_ph2_power.push(Number(Number(el.ph2_power).toFixed(2)));
                        res_kwh.arr_ph3_power.push(Number(Number(el.ph3_power).toFixed(2)));
                        res_kwh.arr_battery.push(Number(Number(el.Battery_capacity).toFixed(2)));
                    });
                } else; //console.log("sum_h의 " + qr + "에서 시간별 데이터가 조회되지 않음");
                // 현재 시간의 분단위 데이터를 조회한다.
                t1 = new Date();
                t2 = new Date();
                t2.setHours(t1.getHours() + 1);
                var qr = {
                    "datetime": {
                        $gte: new Date(t1.getFullYear(), t1.getMonth(), t1.getDate(), t1.getHours(), 0),
                        $lt: new Date(t2.getFullYear(), t2.getMonth(), t2.getDate(), t2.getHours(), 0)
                    }
                };
                mdb.collection('sum_m').find(qr).toArray(function(err, result) {
                    //console.log("sum_m에서" + result.length + "개가 조회됨");
                    if (result.length > 0) {
                        var total_m = {
                            solar: 0,
                            ph1_load: 0,
                            ph2_load: 0,
                            ph3_load: 0,
                            ph1_power: 0,
                            ph2_power: 0,
                            ph3_power: 0
                        };
                        var battemp = 0;
                        result.forEach(function(el, idx, arr) {
                            total_m.solar += Number(el.Solar_input_power_1);
                            total_m.ph1_load += Number(el.ph1_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                            total_m.ph2_load += Number(el.ph2_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                            total_m.ph3_load += Number(el.ph3_power) + (Number(el.Solar_input_power_1) / 3) - (Number(el.Battery_Power) / 3);
                            //total_m.ph1_load += Number(el.ph1_load);
                            //total_m.ph2_load += Number(el.ph2_load);
                            //total_m.ph3_load += Number(el.ph3_load);
                            total_m.ph1_power += Number(el.ph1_power);
                            total_m.ph2_power += Number(el.ph2_power);
                            total_m.ph3_power += Number(el.ph3_power);
                            battemp = Number(el.Battery_capacity);
                        });

                        total_m.solar /= result.length;
                        total_m.ph1_load /= result.length;
                        total_m.ph2_load /= result.length;
                        total_m.ph3_load /= result.length;
                        total_m.ph1_power /= result.length;
                        total_m.ph2_power /= result.length;
                        total_m.ph3_power /= result.length;
                        //console.log("total_m=");
                        //console.log(total_m);

                        var tmp1 = total_m.solar;
                        var tmp2 = total_m.ph1_load;
                        var tmp3 = total_m.ph2_load;
                        var tmp4 = total_m.ph3_load;
                        hour_ph1_power = total_m.ph1_power;
                        hour_ph2_power = total_m.ph2_power;
                        hour_ph3_power = total_m.ph3_power;


                        //var tmp1 = (total_m.solar * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp2 = (total_m.ph1_load * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp3 = (total_m.ph2_load * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp4 = (total_m.ph3_load * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp5 = (total_m.ph1_power * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp6 = (total_m.ph2_power * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);
                        //var tmp7 = (total_m.ph3_power * ((t1.getMinutes() * 60) + t1.getSeconds()) / 3600);

                        res_kwh.arr_datetimes.push(new Date(t2.getFullYear(), t2.getMonth(), t2.getDate(), t2.getHours(), 0));
                        res_kwh.arr_solar.push(tmp1);
                        res_kwh.arr_ph1_load.push(tmp2);
                        res_kwh.arr_ph2_load.push(tmp3);
                        res_kwh.arr_ph3_load.push(tmp4);
                        res_kwh.arr_ph1_power.push(hour_ph1_power);
                        res_kwh.arr_ph2_power.push(hour_ph2_power);
                        res_kwh.arr_ph3_power.push(hour_ph3_power);
                        res_kwh.arr_battery.push(battemp);

                        res_kwh.solar += tmp1;
                        res_kwh.ph1_load += tmp2;
                        res_kwh.ph2_load += tmp3;
                        res_kwh.ph3_load += tmp4;
                        res_kwh.ph1_power += hour_ph1_power;
                        res_kwh.ph2_power += hour_ph2_power;
                        res_kwh.ph3_power += hour_ph3_power;
                        //console.log(total);
                        //resolve(JSON.stringify(res_kwh));
                        resolve(res_kwh);

                    } else {
                        //console.log("sum_m의 " + qr + "에서 데이터가 조회되지 않음");
                        //resolve(JSON.stringify(res_kwh));
                        resolve(res_kwh);

                    }
                });


            }
        });

    });
}

var crc = require('crc'); // crc16 xmodem 계산용
var moment = require('moment'); //moment

process.on('uncaughtException', function(err) {
    console.error(err.stack);
    console.log("Node NOT Exiting...");
});

var SerialPort = require('serialport');
var port = new SerialPort('/dev/ttyUSB0', {
    baudRate: 2400
});

// Open errors will be emitted as an error event 
port.on('error', function(err) {
    console.log('Error: ', err.message);
});


port.on('data', function(data) {
    //console.log(data);
    data.forEach(function(el, idx, arr) {
        func_opti_rcv(el);
    });
});

/*
port.open(function(err) {
    if (err) {
        return console.log('!?Error opening port: ', err.message);
    };
});
*/

var crc_ok = 0;
var crc_fail = 0;
var data_accu = null; // 데이터 수신 및 누적하는 함수
var data_stage = 0; // 데이터 수신 스테이지
var data_type = null; // 데이터 타입
var data_rcv_count = 0; // 데이터 실제 수신 갯수
var data_length; // 데이터 길이
var data_crc1 = null; // CRC1
var data_crc2 = null;

function func_opti_rcv(rcv) {
    //process.stdout.write(data_stage);
    rcv_char = String.fromCharCode(rcv);
    // stage 0 : waiting Header
    if (data_stage == 0 && rcv_char == '^') {
        data_stage = 1;
        data_accu = "^";
        data_length = 0;
        data_rcv_count = 1;
        data_crc1 = null;
        data_crc2 = null;
    }
    // stage 1 : waiting : data type
    else if (data_stage == 1) {
        data_type = rcv_char;
        data_accu += rcv_char;
        data_stage = 2;
        data_rcv_count = 2;
    }
    // stage 2 : waiting : data length of X 100
    else if (data_stage == 2) {
        data_length = parseInt(rcv_char) * 100;
        data_accu += rcv_char;
        data_stage = 3;
        data_rcv_count = 3;
    }

    // stage 3 : waiting : data length of X 10
    else if (data_stage == 3) {
        data_length += parseInt(rcv_char) * 10;
        data_accu += rcv_char;
        data_stage = 4;
        data_rcv_count = 4;
    }
    // stage 4 : waiting : data length of X 1
    else if (data_stage == 4) {
        data_length += parseInt(rcv_char);
        data_accu += rcv_char;
        data_stage = 5;
        data_rcv_count = 5;
    }
    // stage 5 : waiting : data
    else if (data_stage == 5 && data_rcv_count < (data_length + 2)) {
        data_accu += rcv_char;
        data_rcv_count++;
        if (data_rcv_count == (data_length + 2)) { data_stage = 6; }
    }
    // stage 6 : waiting : crc1
    else if (data_stage == 6) {
        data_crc1 = rcv;
        data_stage = 7;
    }
    // stage 7 : waiting : crc2
    else if (data_stage == 7) {
        data_crc2 = rcv;
        data_stage = 8;
    }
    // stage 8 : waiting \r and end
    else if (data_stage == 8 && rcv_char == "\r") {

        var crccalc = crc.crc16xmodem(data_accu);
        if (crccalc == (data_crc1 * 0x100 + data_crc2)) {
            parser(data_accu, data_type, data_length, data_rcv_count);
            //crc_ok++;
            //console.log("Collect!");
        } else {
            crc_fail++;
            //process.stdout.write("CRC FAIL = length/cnt:" + data_length + "/" + data_rcv_count + "-" + data_accu + "/CRC/" + data_crc1.toString(16).toUpperCase() + "-" + data_crc2.toString(16).toUpperCase() + "/=" + crccalc.toString(16).toUpperCase() + "\n");
        }
        //process.stdout.write("length/cnt:" + data_length + "/" + data_rcv_count + "-" + data_accu + "CRC" + data_crc1.toString(16).toUpperCase() + "-" + data_crc2.toString(16).toUpperCase() + "/=" + crccalc.toString(16).toUpperCase() + "\n");
        //process.stdout.write("\rOK=" + crc_ok + "/FAIL=" + crc_fail);
        data_stage = 0;
        //console.log(data_accu);
        //process.stdout.write('e');
    } else {
        data_stage = 0;
        //console.log("!?");
    }

}


var value_gs = {
    Solar_input_voltage_1: 0,
    Solar_input_voltage_2: 0,
    Solar_input_current_1: 0,
    Solar_input_current_2: 0,
    Solar_input_power_1: 0,
    Solar_input_power_2: 0,
    Battery_voltage: 0,
    Battery_capacity: 0,
    Battery_current: 0,
    AC_input_voltage_R: 0,
    AC_input_voltage_S: 0,
    AC_input_voltage_T: 0,
    AC_input_frequency: 0,
    AC_input_current_R: 0,
    AC_input_current_S: 0,
    AC_input_current_T: 0,
    AC_output_voltage_R: 0,
    AC_output_voltage_S: 0,
    AC_output_voltage_T: 0,
    AC_output_frequency: 0,
    AC_output_current_R: 0,
    AC_output_current_S: 0,
    AC_output_current_T: 0,
    Inner_temperature: 0,
    External_battery_temperature: 0,
    Alive: 99,
    cnt: 0
};



var value_gs_a = { Solar_input_voltage_1: 0, Solar_input_voltage_2: 0, Solar_input_current_1: 0, Solar_input_current_2: 0, Solar_input_power_1: 0, Solar_input_power_2: 0, Battery_voltage: 0, Battery_capacity: 0, Battery_current: 0, AC_input_voltage_R: 0, AC_input_voltage_S: 0, AC_input_voltage_T: 0, AC_input_frequency: 0, AC_input_current_R: 0, AC_input_current_S: 0, AC_input_current_T: 0, AC_output_voltage_R: 0, AC_output_voltage_S: 0, AC_output_voltage_T: 0, AC_output_frequency: 0, AC_output_current_R: 0, AC_output_current_S: 0, AC_output_current_T: 0, Inner_temperature: 0, Component_max_temperature: 0, External_battery_temperature: 0, Alive: 99, cnt: 0 };
var value_gs_m = { Solar_input_voltage_1: 0, Solar_input_voltage_2: 0, Solar_input_current_1: 0, Solar_input_current_2: 0, Solar_input_power_1: 0, Solar_input_power_2: 0, Battery_voltage: 0, Battery_capacity: 0, Battery_current: 0, AC_input_voltage_R: 0, AC_input_voltage_S: 0, AC_input_voltage_T: 0, AC_input_frequency: 0, AC_input_current_R: 0, AC_input_current_S: 0, AC_input_current_T: 0, AC_output_voltage_R: 0, AC_output_voltage_S: 0, AC_output_voltage_T: 0, AC_output_frequency: 0, AC_output_current_R: 0, AC_output_current_S: 0, AC_output_current_T: 0, Inner_temperature: 0, Component_max_temperature: 0, External_battery_temperature: 0, Alive: 99, cnt: 0 };
var value_gs_z = { Solar_input_voltage_1: 0, Solar_input_voltage_2: 0, Solar_input_current_1: 0, Solar_input_current_2: 0, Solar_input_power_1: 0, Solar_input_power_2: 0, Battery_voltage: 0, Battery_capacity: 0, Battery_current: 0, AC_input_voltage_R: 0, AC_input_voltage_S: 0, AC_input_voltage_T: 0, AC_input_frequency: 0, AC_input_current_R: 0, AC_input_current_S: 0, AC_input_current_T: 0, AC_output_voltage_R: 0, AC_output_voltage_S: 0, AC_output_voltage_T: 0, AC_output_frequency: 0, AC_output_current_R: 0, AC_output_current_S: 0, AC_output_current_T: 0, Inner_temperature: 0, Component_max_temperature: 0, External_battery_temperature: 0, Alive: 99, cnt: 0 };

var value_gs_aq = { Solar_input_voltage_1: 0, Solar_input_voltage_2: 0, Solar_input_current_1: 0, Solar_input_current_2: 0, Solar_input_power_1: 0, Solar_input_power_2: 0, Battery_voltage: 0, Battery_capacity: 0, Battery_current: 0, AC_input_voltage_R: 0, AC_input_voltage_S: 0, AC_input_voltage_T: 0, AC_input_frequency: 0, AC_input_current_R: 0, AC_input_current_S: 0, AC_input_current_T: 0, AC_output_voltage_R: 0, AC_output_voltage_S: 0, AC_output_voltage_T: 0, AC_output_frequency: 0, AC_output_current_R: 0, AC_output_current_S: 0, AC_output_current_T: 0, Inner_temperature: 0, Component_max_temperature: 0, External_battery_temperature: 0, Alive: 99, cnt: 0 };
var value_gs_q = { Solar_input_voltage_1: 0, Solar_input_voltage_2: 0, Solar_input_current_1: 0, Solar_input_current_2: 0, Solar_input_power_1: 0, Solar_input_power_2: 0, Battery_voltage: 0, Battery_capacity: 0, Battery_current: 0, AC_input_voltage_R: 0, AC_input_voltage_S: 0, AC_input_voltage_T: 0, AC_input_frequency: 0, AC_input_current_R: 0, AC_input_current_S: 0, AC_input_current_T: 0, AC_output_voltage_R: 0, AC_output_voltage_S: 0, AC_output_voltage_T: 0, AC_output_frequency: 0, AC_output_current_R: 0, AC_output_current_S: 0, AC_output_current_T: 0, Inner_temperature: 0, Component_max_temperature: 0, External_battery_temperature: 0, Alive: 99, cnt: 0 };
/*
var value_gs_a = cloneobj(value_gs); // 분단위 누적될 변수
var value_gs_m = cloneobj(value_gs); // 분단위 현재 값
var value_gs_z = cloneobj(value_gs); // 값을 초기화 하기 위한 초기값 저장 변수
*/

function parser(str, type, length, rcv_count) {
    //console.log(str.slice(1, 5));
    //console.log(str);

    var strtype = str.slice(1, 5);
    var strtmp, spstr;


    if (strtype.includes('D110')) { // General Status
        strtmp = (str.slice(5));
        spstr = strtmp.split(",");
        value_gs.Solar_input_voltage_1 = spstr[0] / 10;
        value_gs.Solar_input_voltage_2 = spstr[1] / 10;
        value_gs.Solar_input_current_1 = spstr[2] / 100;
        value_gs.Solar_input_current_2 = spstr[3] / 100;
        value_gs.Solar_input_power_1 = value_gs.Solar_input_voltage_1 * value_gs.Solar_input_current_1;
        value_gs.Solar_input_power_2 = value_gs.Solar_input_voltage_2 * value_gs.Solar_input_current_2;
        value_gs.Battery_voltage = spstr[4] / 10;
        value_gs.Battery_capacity = spstr[5] * 1;
        value_gs.Battery_current = spstr[6] / 10;
        value_gs.AC_input_voltage_R = spstr[7] / 10;
        value_gs.AC_input_voltage_S = spstr[8] / 10;
        value_gs.AC_input_voltage_T = spstr[9] / 10;
        value_gs.AC_input_frequency = spstr[10] / 100;
        value_gs.AC_input_current_R = spstr[11] / 10;
        value_gs.AC_input_current_S = spstr[12] / 10;
        value_gs.AC_input_current_T = spstr[13] / 10;
        value_gs.AC_output_voltage_R = spstr[14] / 10;
        value_gs.AC_output_voltage_S = spstr[15] / 10;
        value_gs.AC_output_voltage_T = spstr[16] / 10;
        value_gs.AC_output_frequency = spstr[17] / 100;
        value_gs.AC_output_current_R = spstr[18] / 10;
        value_gs.AC_output_current_S = spstr[19] / 10;
        value_gs.AC_output_current_T = spstr[20] / 10;
        value_gs.Inner_temperature = spstr[21] * 1;
        value_gs.External_battery_temperature = spstr[23] * 1;
        value_gs.Alive = 0;


        // 분단위 누적
        value_gs_a.Solar_input_voltage_1 += value_gs.Solar_input_voltage_1;
        value_gs_a.Solar_input_voltage_2 += value_gs.Solar_input_voltage_2;
        value_gs_a.Solar_input_current_1 += value_gs.Solar_input_current_1;
        value_gs_a.Solar_input_current_2 += value_gs.Solar_input_current_2;
        value_gs_a.Solar_input_power_1 += value_gs.Solar_input_power_1;
        value_gs_a.Solar_input_power_2 += value_gs.Solar_input_power_2;
        value_gs_a.Battery_voltage += value_gs.Battery_voltage;
        value_gs_a.Battery_capacity += value_gs.Battery_capacity;
        value_gs_a.Battery_current += value_gs.Battery_current;
        value_gs_a.AC_input_voltage_R += value_gs.AC_input_voltage_R;
        value_gs_a.AC_input_voltage_S += value_gs.AC_input_voltage_S;
        value_gs_a.AC_input_voltage_T += value_gs.AC_input_voltage_T;
        value_gs_a.AC_input_frequency += value_gs.AC_input_frequency;
        value_gs_a.AC_input_current_R += value_gs.AC_input_current_R;
        value_gs_a.AC_input_current_S += value_gs.AC_input_current_S;
        value_gs_a.AC_input_current_T += value_gs.AC_input_current_T;
        value_gs_a.AC_output_voltage_R += value_gs.AC_output_voltage_R;
        value_gs_a.AC_output_voltage_S += value_gs.AC_output_voltage_S;
        value_gs_a.AC_output_voltage_T += value_gs.AC_output_voltage_T;
        value_gs_a.AC_output_frequency += value_gs.AC_output_frequency;
        value_gs_a.AC_output_current_R += value_gs.AC_output_current_R;
        value_gs_a.AC_output_current_S += value_gs.AC_output_current_S;
        value_gs_a.AC_output_current_T += value_gs.AC_output_current_T;
        value_gs_a.Inner_temperature += value_gs.Inner_temperature;
        value_gs_a.External_battery_temperature += value_gs.External_battery_temperature;
        value_gs_a.cnt++;
        value_gs_a.alive = 0;


        //15분단위 누적
        value_gs_aq.Solar_input_voltage_1 += value_gs.Solar_input_voltage_1;
        value_gs_aq.Solar_input_voltage_2 += value_gs.Solar_input_voltage_2;
        value_gs_aq.Solar_input_current_1 += value_gs.Solar_input_current_1;
        value_gs_aq.Solar_input_current_2 += value_gs.Solar_input_current_2;
        value_gs_aq.Solar_input_power_1 += value_gs.Solar_input_power_1;
        value_gs_aq.Solar_input_power_2 += value_gs.Solar_input_power_2;
        value_gs_aq.Battery_voltage += value_gs.Battery_voltage;
        value_gs_aq.Battery_capacity += value_gs.Battery_capacity;
        value_gs_aq.Battery_current += value_gs.Battery_current;
        value_gs_aq.AC_input_voltage_R += value_gs.AC_input_voltage_R;
        value_gs_aq.AC_input_voltage_S += value_gs.AC_input_voltage_S;
        value_gs_aq.AC_input_voltage_T += value_gs.AC_input_voltage_T;
        value_gs_aq.AC_input_frequency += value_gs.AC_input_frequency;
        value_gs_aq.AC_input_current_R += value_gs.AC_input_current_R;
        value_gs_aq.AC_input_current_S += value_gs.AC_input_current_S;
        value_gs_aq.AC_input_current_T += value_gs.AC_input_current_T;
        value_gs_aq.AC_output_voltage_R += value_gs.AC_output_voltage_R;
        value_gs_aq.AC_output_voltage_S += value_gs.AC_output_voltage_S;
        value_gs_aq.AC_output_voltage_T += value_gs.AC_output_voltage_T;
        value_gs_aq.AC_output_frequency += value_gs.AC_output_frequency;
        value_gs_aq.AC_output_current_R += value_gs.AC_output_current_R;
        value_gs_aq.AC_output_current_S += value_gs.AC_output_current_S;
        value_gs_aq.AC_output_current_T += value_gs.AC_output_current_T;
        value_gs_aq.Inner_temperature += value_gs.Inner_temperature;
        value_gs_aq.External_battery_temperature += value_gs.External_battery_temperature;
        value_gs_aq.cnt++;
        value_gs_aq.alive = 0;


        //console.log(value_gs);
        //console.log("태양광 volt = " + value_gs.Solar_input_voltage_1 + "/amp = " + value_gs.Solar_input_current_1 + " /watt = " + value_gs.Solar_input_power_1);
        //console.log(str);
    } else {
        console.log(str);
    }
}

var moderun;

function mode_charge() {
    if (moderun != 0) {
        moderun = 0;
        console.log("Charge MODE!");
        port.write("^S005EDA1\r");
        port.write("^S005EDB1\r");
        //port.write("^S005EDC1\r");
        port.write("^S005EDD1\r");
        port.write("^S005EDE1\r");
        port.write("^S005EDF1\r");
        port.write("^S005EDG1\r");
        port.write("^S005EDH1\r");
    }

}

function mode_discharge() {
    if (moderun != 1) {
        moderun = 1;
        console.log("Discharge MODE!");
        port.write("S011GPMP009300\r");
        port.write("^S005EDA0\r");
        port.write("^S005EDB0\r");
        ///port.write("^S005EDC1\r");
        port.write("^S005EDD1\r");
        port.write("^S005EDE1\r");
        port.write("^S005EDF1\r");
        port.write("^S005EDG1\r");
        port.write("^S005EDH1\r");
    }
}

function mode_idle() {
    if (moderun != 2) {
        moderun = 2;
        console.log("IDLE MODE");
        port.write("^S005EDA0\r");
        port.write("^S005EDB0\r");
        //port.write("^S005EDC1\r");
        port.write("^S005EDD0\r");
        port.write("^S005EDE0\r");
        port.write("^S005EDF0\r");
        port.write("^S005EDG0\r");
        port.write("^S005EDH0\r");
    }
}

function send_opti_with_crc(sendstr) {
    var chk = checksum(sendstr).toString();
    chk = zerofil(chk);
    sendstr += chk;
    console.log(sendstr);
    port.write(sendstr + "\r");
}

// create an empty modbus client 
var ModbusRTU = require("modbus-serial");
var client_modbus = new ModbusRTU();

// open connection to a serial port 
//client_modbus.connectRTUBuffered("/dev/ttyUSB1", { baudrate: 19200 });
client_modbus.connectRTUBuffered("COM6", { baudrate: 9600 });
client_modbus.setID(1);

var value_mb = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };
var value_mb_a = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };
var value_mb_m = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };
var value_mb_z = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };

var value_mb_aq = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };
var value_mb_q = { ph1_volt: 0, ph2_volt: 0, ph3_volt: 0, ph1_current: 0, ph2_current: 0, ph3_current: 0, ph1_power: 0, ph2_power: 0, ph3_power: 0, ph1_powerVA: 0, ph2_powerVA: 0, ph3_powerVA: 0, ph1_amp_reactive: 0, ph2_amp_reactive: 0, ph3_amp_reactive: 0, ph1_pf: 0, ph2_pf: 0, ph3_pf: 0, Alive: 99, cnt: 0 };

var cut_power = 17;
var cut_charge = cut_power - 0.5;
var cut_idle = cut_power - 0.25;

// ESS의 충전 / 방전 / 아이들의 동작모드를 결정한다. 30초에 한번
setInterval(function() {
    try {
        if (value_mb_aq.cnt > 0) {
            qhour_ph1_power = value_mb_aq.ph1_power / value_mb_aq.cnt;
            qhour_ph2_power = value_mb_aq.ph2_power / value_mb_aq.cnt;
            qhour_ph3_power = value_mb_aq.ph3_power / value_mb_aq.cnt;
        }
        var batcapa;
        if (value_gs_aq.cnt > 0) {
            batcapa = value_gs_aq.Battery_capacity / value_gs_aq.cnt;
        }

        //var power_sum = (hour_ph1_power + hour_ph2_power + hour_ph3_power) / 1000;
        var power_sum = (qhour_ph1_power + qhour_ph2_power + qhour_ph3_power) / 1000;
        if (power_sum > cut_power) {
            discharge_amp_change();
            mode_discharge();
        } else if (power_sum < cut_charge) {
            {
                // moderun = 0 Charge
                // moderun = 1 Discharge
                // moderun = 2 idle
                //if (batcapa > 97)
                //    mode_idle();
                //else
                //charge_amp_change();
                mode_charge();
            }
        } else if (power_sum < cut_idle)
            mode_idle();

    } catch (err) {
        console.log(err);
    }
}, 30000);

function charge_amp_change() {
    var tempq = { tmp_solar: 0, tmp_ph1_pwr: 0, tmp_ph2_pwr: 0, tmp_ph3_pwr: 0, ld1: 0, ld2: 0, ld3: 0, ld: 0, batvol: 0, b_volt: 0, b_current: 0, b_pwr: 0 };
    if (value_gs_aq.cnt > 0) {
        tempq.tmp_solar = value_gs_aq.Solar_input_power_1 / value_gs_aq.cnt;
        tempq.b_current = value_gs_aq.Battery_current / value_gs_aq.cnt;
        tempq.b_volt = value_gs_aq.Battery_voltage / value_gs_aq.cnt;
        tempq.b_pwr = tempq.b_volt * tempq.b_current;
    }

    if (value_mb_aq.cnt > 0) {
        tempq.tmp_ph1_pwr = value_mb_aq.ph1_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
        tempq.tmp_ph2_pwr = value_mb_aq.ph2_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
        tempq.tmp_ph3_pwr = value_mb_aq.ph3_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
    }

    var tmp_ph1_pwr_m, tmp_ph2_pwr_m, tmp_ph3_pwr_m; // 분단위 누적된 데이터의 평균이 저장 된 것 (optisolar)
    if (value_mb_a.cnt > 0) {
        tmp_ph1_pwr_m = value_mb_a.ph1_power / value_mb_a.cnt;
        tmp_ph2_pwr_m = value_mb_a.ph2_power / value_mb_a.cnt;
        tmp_ph3_pwr_m = value_mb_a.ph3_power / value_mb_a.cnt;
    }

    var tmp_solar_m, tmp_bat_pwr_m; // 분단위 누적된 데이터의 평균 (modbus 데이터)
    if (value_gs_a.cnt > 0) {
        tmp_solar_m = value_gs_a.Solar_input_power_1 / value_gs_a.cnt;
        tmp_bat_pwr_m = (value_gs_a.Battery_voltage / value_gs_a.cnt) * (value_gs_a.Battery_current / value_gs_a.cnt);
    }

    tempq.ld1 = tempq.tmp_ph1_pwr + (tempq.tmp_solar / 3);
    tempq.ld2 = tempq.tmp_ph2_pwr + (tempq.tmp_solar / 3);
    tempq.ld3 = tempq.tmp_ph3_pwr + (tempq.tmp_solar / 3);

    //client.write("^S010MCHGC1000\r");   // Set battery maximum charge current / 0.1a단위
    //client.write("^S011MUCHGC1000\r");  // Max. AC charging current from AC / 0.1a
    //client.write("^S009BDCM0200\r");    // Battery discharge max current in hybrid mode  / 1a단위
    //client.write("^S011GPMP010000\r")   // Set max power of feeding  grid / 1W단위
    tempq.ld = tempq.ld1 + tempq.ld2 + tempq.ld3;

    if (((tempq.ld - tempq.tmp_solar) / 1000) < cut_charge) {

        var setgrid = (cut_charge * 1000) - tempq.ld + tempq.tmp_solar;
        var mt = moment();

        var gridoutpowerq = (cut_charge * 950) - (tempq.tmp_solar + tempq.tmp_ph1_pwr + tempq.tmp_ph2_pwr + tempq.tmp_ph3_pwr);
        var gridoutpowerm = (cut_charge * 950) - (tmp_solar_m + tmp_ph1_pwr_m + tmp_ph2_pwr_m + tmp_ph3_pwr_m) - tmp_bat_pwr_m;
        var gridoutpower;
        if (gridoutpowerm > gridoutpowerq) gridoutpower = gridoutpowerm;
        else gridoutpower = gridoutpowerq;
        if (gridoutpower > 10000) gridoutpower = 10000;
        else if (gridoutpower < 1000) gridoutpower = 1000;
        var snd = "^S011GPMP" + zerofil6(parseInt(gridoutpower)) + "\r";
        port.write(snd);
        //port.write("^S011GPMP010000\r");
        console.log(snd);
    } else {}


}

function discharge_amp_change() {
    var tempq = { tmp_solar: 0, tmp_ph1_pwr: 0, tmp_ph2_pwr: 0, tmp_ph3_pwr: 0, ld1: 0, ld2: 0, ld3: 0, ld: 0, batvol: 0, b_volt: 0, b_current: 0, b_pwr: 0 };
    if (value_gs_aq.cnt > 0) {
        tempq.tmp_solar = value_gs_aq.Solar_input_power_1 / value_gs_aq.cnt;
        tempq.b_current = value_gs_aq.Battery_current / value_gs_aq.cnt;
        tempq.b_volt = value_gs_aq.Battery_voltage / value_gs_aq.cnt;
        tempq.b_pwr = tempq.b_volt * tempq.b_current;
    }

    if (value_mb_aq.cnt > 0) {
        tempq.tmp_ph1_pwr = value_mb_aq.ph1_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
        tempq.tmp_ph2_pwr = value_mb_aq.ph2_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
        tempq.tmp_ph3_pwr = value_mb_aq.ph3_power / value_mb_aq.cnt - (tempq.b_pwr / 3);
    }

    var tmp_ph1_pwr_m, tmp_ph2_pwr_m, tmp_ph3_pwr_m; // 분단위 누적된 데이터의 평균이 저장 된 것 (optisolar)
    if (value_mb_a.cnt > 0) {
        tmp_ph1_pwr_m = value_mb_a.ph1_power / value_mb_a.cnt;
        tmp_ph2_pwr_m = value_mb_a.ph2_power / value_mb_a.cnt;
        tmp_ph3_pwr_m = value_mb_a.ph3_power / value_mb_a.cnt;
    }

    var tmp_solar_m, tmp_bat_pwr_m; // 분단위 누적된 데이터의 평균 (modbus 데이터)
    if (value_gs_a.cnt > 0) {
        tmp_solar_m = value_gs_a.Solar_input_power_1 / value_gs_a.cnt;
        tmp_bat_pwr_m = (value_gs_a.Battery_voltage / value_gs_a.cnt) * (value_gs_a.Battery_current / value_gs_a.cnt);
    }

    tempq.ld1 = tempq.tmp_ph1_pwr + (tempq.tmp_solar / 3);
    tempq.ld2 = tempq.tmp_ph2_pwr + (tempq.tmp_solar / 3);
    tempq.ld3 = tempq.tmp_ph3_pwr + (tempq.tmp_solar / 3);

    //client.write("^S010MCHGC1000\r");   // Set battery maximum charge current / 0.1a단위
    //client.write("^S011MUCHGC1000\r");  // Max. AC charging current from AC / 0.1a
    //client.write("^S009BDCM0200\r");    // Battery discharge max current in hybrid mode  / 1a단위
    //client.write("^S011GPMP010000\r")   // Set max power of feeding grid / 1W단위
    tempq.ld = tempq.ld1 + tempq.ld2 + tempq.ld3;

    if (((tempq.ld - tempq.tmp_solar) / 1000) > cut_power) {
        //if ((tt.ld / 1000) > (cut_power * 1.1)) {
        var setgrid = tempq.ld - (cut_power * 1000);
        var mt = moment();
        var gridoutpowerq = tempq.tmp_solar + (tempq.tmp_ph1_pwr + tempq.tmp_ph2_pwr + tempq.tmp_ph3_pwr - (cut_power * 950));
        var gridoutpowerm = tmp_solar_m + (tmp_ph1_pwr_m + tmp_ph2_pwr_m + tmp_ph3_pwr_m - (cut_power * 950)) - tmp_bat_pwr_m;
        var gridoutpower;
        if (gridoutpowerm > gridoutpowerq) gridoutpower = gridoutpowerm;
        else gridoutpower = gridoutpowerq;
        if (gridoutpower > 10000) gridoutpower = 10000;
        else if (gridoutpower < 1000) gridoutpower = 1000;
        var snd = "^S011GPMP" + zerofil6(parseInt(gridoutpower)) + "\r";
        port.write(snd);
        //port.write("^S011GPMP010000\r");
        console.log(snd);
        //}
    } else {}


}

// 과충전과 과방전 상태에서 아이들로 전환한다. 5초에 한번씩 확인한다.
// 또한 방전 Amp를 변경한다.
setInterval(function() {
    try {
        if (value_mb_aq.cnt > 0) {
            qhour_ph1_power = value_mb_aq.ph1_power / value_mb_aq.cnt;
            qhour_ph2_power = value_mb_aq.ph2_power / value_mb_aq.cnt;
            qhour_ph3_power = value_mb_aq.ph3_power / value_mb_aq.cnt;
        }
        var batcapa;
        if (value_gs_aq.cnt > 0) {
            batcapa = value_gs_aq.Battery_capacity / value_gs_aq.cnt;
        }
        var power_sum = (qhour_ph1_power + qhour_ph2_power + qhour_ph3_power) / 1000;
        // moderun = 0 Charge
        // moderun = 1 Discharge
        // moderun = 2 idle

        if (moderun == 0) // Charge중
        {
            //charge_amp_change();
            if (power_sum > cut_idle) {
                mode_idle();
                //console.log("충전 컷!");
            }
        } else if (moderun == 1) // Discharge 중
        {
            discharge_amp_change();
            if (power_sum < cut_idle) {
                mode_idle();
                //console.log("방전 컷!");
            }
        } else if (moderun == 2) {
            if (power_sum > cut_power)
                mode_discharge();
        }

    } catch (err) {
        console.log(err);
    }
}, 5000);

var tick = 0;
// Modbus 수신 0.5초 간격
setInterval(function() {
            try {
                //console.log("Query General Status!");
                if (tick == 0) {
                    port.write("^P003GS\r");
                    //process.stdout.write('0');
                    tick = 1;
                } else {
                    port.write("^P003GS\r");
                    //process.stdout.write('1');
                    tick = 0;
                }

                client_modbus.readInputRegisters(0, 37, function(err, rcdata) {
                        var n = 4;
                        //console.log(rcdata)
                        if (err) { throw err; } else {
                            value_mb.ph1_volt = rcdata.buffer.readFloatBE(n * 0);
                            value_mb.ph2_volt = rcdata.buffer.readFloatBE(n * 1);
                            value_mb.ph3_volt = rcdata.buffer.readFloatBE(n * 2);
                            value_mb.ph1_current = rcdata.buffer.readFloatBE(n * 3);
                            value_mb.ph2_current = rcdata.buffer.readFloatBE(n * 4);
                            value_mb.ph3_current = rcdata.buffer.readFloatBE(n * 5);
                            value_mb.ph1_power = rcdata.buffer.readFloatBE(n * 6);
                            value_mb.ph2_power = rcdata.buffer.readFloatBE(n * 7);
                            value_mb.ph3_power = rcdata.buffer.readFloatBE(n * 8);
                            value_mb.ph1_powerVA = rcdata.buffer.readFloatBE(n * 9);
                            value_mb.ph2_powerVA = rcdata.buffer.readFloatBE(n * 10);
                            value_mb.ph3_powerVA = rcdata.buffer.readFloatBE(n * 11);
                            value_mb.ph1_amp_reactive = rcdata.buffer.readFloatBE(n * 12);
                            value_mb.ph2_amp_reactive = rcdata.buffer.readFloatBE(n * 13);
                            value_mb.ph3_amp_reactive = rcdata.buffer.readFloatBE(n * 14);
                            value_mb.ph1_pf = rcdata.buffer.readFloatBE(n * 15);
                            value_mb.ph2_pf = rcdata.buffer.readFloatBE(n * 16);
                            value_mb.ph3_pf = rcdata.buffer.readFloatBE(n * 17);
                        }

                        client_modbus.readInputRegisters(0, 37, function(err, rcdata) {
                            var n = 4;
                            //console.log(rcdata)
                            if (err) { throw err; } else {
                                console.log(rcdata);
                                value_mb.ph1_volt = rcdata.buffer.readFloatBE(n * 0);
                                value_mb.ph2_volt = rcdata.buffer.readFloatBE(n * 1);
                                value_mb.ph3_volt = rcdata.buffer.readFloatBE(n * 2);
                                value_mb.ph1_current = rcdata.buffer.readFloatBE(n * 3);
                                value_mb.ph2_current = rcdata.buffer.readFloatBE(n * 4);
                                value_mb.ph3_current = rcdata.buffer.readFloatBE(n * 5);
                                value_mb.ph1_power = rcdata.buffer.readFloatBE(n * 6);
                                value_mb.ph2_power = rcdata.buffer.readFloatBE(n * 7);
                                value_mb.ph3_power = rcdata.buffer.readFloatBE(n * 8);
                                value_mb.ph1_powerVA = rcdata.buffer.readFloatBE(n * 9);
                                value_mb.ph2_powerVA = rcdata.buffer.readFloatBE(n * 10);
                                value_mb.ph3_powerVA = rcdata.buffer.readFloatBE(n * 11);
                                value_mb.ph1_amp_reactive = rcdata.buffer.readFloatBE(n * 12);
                                value_mb.ph2_amp_reactive = rcdata.buffer.readFloatBE(n * 13);
                                value_mb.ph3_amp_reactive = rcdata.buffer.readFloatBE(n * 14);
                                value_mb.ph1_pf = rcdata.buffer.readFloatBE(n * 15);
                                value_mb.ph2_pf = rcdata.buffer.readFloatBE(n * 16);
                                value_mb.ph3_pf = rcdata.buffer.readFloatBE(n * 17);
                                value_mb.Alive = 0;

                                // 분단위 누적이 들어간다.
                                value_mb_a.ph1_volt += value_mb.ph1_volt;
                                value_mb_a.ph2_volt += value_mb.ph2_volt;
                                value_mb_a.ph3_volt += value_mb.ph3_volt;
                                value_mb_a.ph1_current += value_mb.ph1_current;
                                value_mb_a.ph2_current += value_mb.ph2_current;
                                value_mb_a.ph3_current += value_mb.ph3_current;
                                value_mb_a.ph1_power += value_mb.ph1_power;
                                value_mb_a.ph2_power += value_mb.ph2_power;
                                value_mb_a.ph3_power += value_mb.ph3_power;
                                value_mb_a.ph1_powerVA += value_mb.ph1_powerVA;
                                value_mb_a.ph2_powerVA += value_mb.ph2_powerVA;
                                value_mb_a.ph3_powerVA += value_mb.ph3_powerVA;
                                value_mb_a.ph1_amp_reactive += value_mb.ph1_amp_reactive;
                                value_mb_a.ph2_amp_reactive += value_mb.ph2_amp_reactive;
                                value_mb_a.ph3_amp_reactive += value_mb.ph3_amp_reactive;
                                value_mb_a.ph1_pf += value_mb.ph1_pf;
                                value_mb_a.ph2_pf += value_mb.ph2_pf;
                                value_mb_a.ph3_pf += value_mb.ph3_pf;
                                value_mb_a.Alive = 0;
                                value_mb_a.cnt++;

                                // 15분 단위 누적이 들어간다.
                                value_mb_aq.ph1_volt += value_mb.ph1_volt;
                                value_mb_aq.ph2_volt += value_mb.ph2_volt;
                                value_mb_aq.ph3_volt += value_mb.ph3_volt;
                                value_mb_aq.ph1_current += value_mb.ph1_current;
                                value_mb_aq.ph2_current += value_mb.ph2_current;
                                value_mb_aq.ph3_current += value_mb.ph3_current;
                                value_mb_aq.ph1_power += value_mb.ph1_power;
                                value_mb_aq.ph2_power += value_mb.ph2_power;
                                value_mb_aq.ph3_power += value_mb.ph3_power;
                                value_mb_aq.ph1_powerVA += value_mb.ph1_powerVA;
                                value_mb_aq.ph2_powerVA += value_mb.ph2_powerVA;
                                value_mb_aq.ph3_powerVA += value_mb.ph3_powerVA;
                                value_mb_aq.ph1_amp_reactive += value_mb.ph1_amp_reactive;
                                value_mb_aq.ph2_amp_reactive += value_mb.ph2_amp_reactive;
                                value_mb_aq.ph3_amp_reactive += value_mb.ph3_amp_reactive;
                                value_mb_aq.ph1_pf += value_mb.ph1_pf;
                                value_mb_aq.ph2_pf += value_mb.ph2_pf;
                                value_mb_aq.ph3_pf += value_mb.ph3_pf;
                                value_mb_aq.Alive = 0;
                                value_mb_aq.cnt++;


                            }
                        });
                    } catch (err) {
                        console.log(err);
                    }
                }, 500);


            var time_out = 30;
            // 타임아웃 처리 및 DB업데이트 수행
            setInterval(function() {
                try {
                    //process.stdout.write("+"); 
                    // timeout 계산용 증가
                    value_mb.Alive++;
                    value_gs.Alive++;
                    res_kwh.alive++;
                    res_kwhq.alive++;
                    // overflow 방지용
                    if (value_mb.Alive > 1000) value_mb.Alive = 1000; // timeout
                    if (value_gs.Alive > 1000) value_gs.Alive = 1000;
                    if (res_kwh.alive > 1000) res_kwh.alive = 1000;
                    if (res_kwhq.alive > 1000) res_kwhq.alive = 1000;
                    /*
                    // flag1은 Modbus 디지털게이지의 db업데이트로 한다.
                    if (flag_db_update1) {
                        //process.stdout.write("1U");
                        if (value_mb.Alive < time_out) {
                            var mnt = moment();
                            var timetmp = mnt.format();
                            var dbsave = {
                                "Time": timetmp,
                                "datetime": new Date(mnt.toISOString()),
                                "ph1_volt": value_mb.ph1_volt,
                                "ph2_volt": value_mb.ph2_volt,
                                "ph3_volt": value_mb.ph3_volt,
                                "ph1_current": value_mb.ph1_current,
                                "ph2_current": value_mb.ph2_current,
                                "ph3_current": value_mb.ph3_current,
                                "ph1_power": value_mb.ph1_power,
                                "ph2_power": value_mb.ph2_power,
                                "ph3_power": value_mb.ph3_power,
                                "ph1_powerVA": value_mb.ph1_powerVA,
                                "ph2_powerVA": value_mb.ph2_powerVA,
                                "ph3_powerVA": value_mb.ph3_powerVA,
                                "ph1_amp_reactive": value_mb.ph1_amp_reactive,
                                "ph2_amp_reactive": value_mb.ph2_amp_reactive,
                                "ph3_amp_reactive": value_mb.ph3_amp_reactive,
                                "ph1_pf": value_mb.ph1_pf,
                                "ph2_pf": value_mb.ph2_pf,
                                "ph3_pf": value_mb.ph3_pf
                            };
                            mdb.collection("powermeter").insertOne(dbsave, function(err, res) {
                                if (err) console.log(err);
                                //console.log("db1 1 record inserted");
                                flag_db_update1 = false;
                            });

                        } else {
                            //process.stdout.write("1T");
                        }
                    }
                    */
                    /*
                    // flag1은 optisolar db업데이트로 한다.
                    if (flag_db_update2) {
                        //process.stdout.write("2U");
                        if (value_gs.Alive < time_out) {
                            var mnt2 = moment();
                            var timetmp2 = mnt2.format();
                            var dbsave2 = {
                                "Time": timetmp2,
                                "datetime": new Date(mnt2.toISOString()),
                                "Solar_input_voltage_1": value_gs.Solar_input_voltage_1,
                                "Solar_input_power_1": value_gs.Solar_input_power_1,
                                "AC_input_voltage_R": value_gs.AC_input_voltage_R,
                                "AC_input_voltage_S": value_gs.AC_input_voltage_S,
                                "AC_input_voltage_T": value_gs.AC_input_voltage_T,
                                "AC_input_frequency": value_gs.AC_input_frequency,
                                "Battery_voltage": value_gs.Battery_voltage,
                                "Battery_capacity": value_gs.Battery_capacity,
                                "Battery_current": value_gs.Battery_current
                            };
                            mdb.collection("optisolar").insertOne(dbsave2, function(err, res) {
                                if (err) console.log(err);
                                //console.log("db2 1 record inserted");
                                flag_db_update2 = false;
                            });
                        } else {
                            //process.stdout.write("2T");
                        }
                    }
                    */
                } catch (err) {
                    console.log(err);
                }
            }, 100);


            var flag_db_update1 = false;
            var flag_db_update2 = false;
            var dbsum_hour = new Date().getHours();
            var dbsum_minute = new Date().getMinutes();
            var dbsum_day = new Date().getDate();
            var dbsum_month = new Date().getMonth();
            var update_hour = false;
            var update_day = false;
            var ph1_load_m = 0;
            var ph2_load_m = 0;
            var ph3_load_m = 0;
            // 1초 마다 db update 및 1분단위 데이터 처리
            setInterval(function() {
                try {
                    //process.stdout.write("U");
                    flag_db_update1 = true;
                    flag_db_update2 = true;

                    // 현재 minute가 변경되었다면?
                    if (dbsum_minute != new Date().getMinutes()) {
                        dbsum_minute = new Date().getMinutes(); //분 갱신

                        var t = {
                            d: new Date(),
                            Solar_input_voltage_1: 0,
                            Solar_input_power_1: 0,
                            Battery_voltage: 0,
                            Battery_capacity: 0,
                            Battery_current: 0,
                            Inner_temperature: 0,
                            External_battery_temperature: 0,
                            ph1_volt: 0,
                            ph2_volt: 0,
                            ph3_volt: 0,
                            ph1_current: 0,
                            ph2_current: 0,
                            ph3_current: 0,
                            ph1_power: 0,
                            ph2_power: 0,
                            ph3_power: 0,
                            ph1_powerVA: 0,
                            ph2_powerVA: 0,
                            ph3_powerVA: 0,
                            ph1_amp_reactive: 0,
                            ph2_amp_reactive: 0,
                            ph3_amp_reactive: 0,
                            ph1_pf: 0,
                            ph2_pf: 0,
                            ph3_pf: 0,
                            update_opti: false,
                            update_pwmt: false,
                            t1: 0,
                            t2: 0,
                            qr: 0
                        };

                        t.update_opti = false;
                        t.update_pwmt = false;
                        t.t1 = moment();

                        // optisolar 분 평균을 낸다.
                        if (value_gs_a.cnt > 0) {
                            value_gs_m.Alive = 0;

                            value_gs_m.Solar_input_voltage_1 = value_gs_a.Solar_input_voltage_1 / value_gs_a.cnt;
                            value_gs_m.Solar_input_voltage_2 = value_gs_a.Solar_input_voltage_2 / value_gs_a.cnt;
                            value_gs_m.Solar_input_current_1 = value_gs_a.Solar_input_current_1 / value_gs_a.cnt;
                            value_gs_m.Solar_input_current_2 = value_gs_a.Solar_input_current_2 / value_gs_a.cnt;
                            value_gs_m.Solar_input_power_1 = value_gs_a.Solar_input_power_1 / value_gs_a.cnt;
                            value_gs_m.Solar_input_power_2 = value_gs_a.Solar_input_power_2 / value_gs_a.cnt;
                            value_gs_m.Battery_voltage = value_gs_a.Battery_voltage / value_gs_a.cnt;
                            value_gs_m.Battery_capacity = value_gs_a.Battery_capacity / value_gs_a.cnt;
                            value_gs_m.Battery_current = value_gs_a.Battery_current / value_gs_a.cnt;
                            value_gs_m.AC_input_voltage_R = value_gs_a.AC_input_voltage_R / value_gs_a.cnt;
                            value_gs_m.AC_input_voltage_S = value_gs_a.AC_input_voltage_S / value_gs_a.cnt;
                            value_gs_m.AC_input_voltage_T = value_gs_a.AC_input_voltage_T / value_gs_a.cnt;
                            value_gs_m.AC_input_frequency = value_gs_a.AC_input_frequency / value_gs_a.cnt;
                            value_gs_m.AC_input_current_R = value_gs_a.AC_input_current_R / value_gs_a.cnt;
                            value_gs_m.AC_input_current_S = value_gs_a.AC_input_current_S / value_gs_a.cnt;
                            value_gs_m.AC_input_current_T = value_gs_a.AC_input_current_T / value_gs_a.cnt;
                            value_gs_m.AC_output_voltage_R = value_gs_a.AC_output_voltage_R / value_gs_a.cnt;
                            value_gs_m.AC_output_voltage_S = value_gs_a.AC_output_voltage_S / value_gs_a.cnt;
                            value_gs_m.AC_output_voltage_T = value_gs_a.AC_output_voltage_T / value_gs_a.cnt;
                            value_gs_m.AC_output_frequency = value_gs_a.AC_output_frequency / value_gs_a.cnt;
                            value_gs_m.AC_output_current_R = value_gs_a.AC_output_current_R / value_gs_a.cnt;
                            value_gs_m.AC_output_current_S = value_gs_a.AC_output_current_S / value_gs_a.cnt;
                            value_gs_m.AC_output_current_T = value_gs_a.AC_output_current_T / value_gs_a.cnt;
                            value_gs_m.Inner_temperature = value_gs_a.Inner_temperature / value_gs_a.cnt;
                            value_gs_m.Component_max_temperature = value_gs_a.Component_max_temperature / value_gs_a.cnt;
                            value_gs_m.External_battery_temperature = value_gs_a.External_battery_temperature / value_gs_a.cnt;



                            //console.log(value_gs_a.cnt + "개의 gs데이터가 모였다. 아래의 값이다.");
                            //console.log(value_gs_m);
                            value_gs_a = cloneobj(value_gs_z);



                            // 분단위 DB에 넣을 Temp값을 미리 넣어둔다.
                            t.Solar_input_voltage_1 = value_gs_m.Solar_input_voltage_1;
                            t.Solar_input_power_1 = value_gs_m.Solar_input_power_1;
                            t.Battery_voltage = value_gs_m.Battery_voltage;
                            t.Battery_capacity = value_gs_m.Battery_capacity;
                            t.Battery_current = value_gs_m.Battery_current;
                            t.Inner_temperature = value_gs_m.Inner_temperature;
                            t.External_battery_temperature = value_gs_m.External_battery_temperature;
                            t.update_opti = true;
                        } else {
                            //console.log("opti에서 데이터를 수신하지 못했다.");
                        }


                        // modbus 파워메터 분 평균을 낸다.
                        if (value_mb_a.cnt > 0) {
                            value_mb_m.ph1_volt = value_mb_a.ph1_volt / value_mb_a.cnt;
                            value_mb_m.ph2_volt = value_mb_a.ph2_volt / value_mb_a.cnt;
                            value_mb_m.ph3_volt = value_mb_a.ph3_volt / value_mb_a.cnt;
                            value_mb_m.ph1_current = value_mb_a.ph1_current / value_mb_a.cnt;
                            value_mb_m.ph2_current = value_mb_a.ph2_current / value_mb_a.cnt;
                            value_mb_m.ph3_current = value_mb_a.ph3_current / value_mb_a.cnt;
                            value_mb_m.ph1_power = value_mb_a.ph1_power / value_mb_a.cnt;
                            value_mb_m.ph2_power = value_mb_a.ph2_power / value_mb_a.cnt;
                            value_mb_m.ph3_power = value_mb_a.ph3_power / value_mb_a.cnt;
                            value_mb_m.ph1_powerVA = value_mb_a.ph1_powerVA / value_mb_a.cnt;
                            value_mb_m.ph2_powerVA = value_mb_a.ph2_powerVA / value_mb_a.cnt;
                            value_mb_m.ph3_powerVA = value_mb_a.ph3_powerVA / value_mb_a.cnt;
                            value_mb_m.ph1_amp_reactive = value_mb_a.ph1_amp_reactive / value_mb_a.cnt;
                            value_mb_m.ph2_amp_reactive = value_mb_a.ph2_amp_reactive / value_mb_a.cnt;
                            value_mb_m.ph3_amp_reactive = value_mb_a.ph3_amp_reactive / value_mb_a.cnt;
                            value_mb_m.ph1_pf = value_mb_a.ph1_pf / value_mb_a.cnt;
                            value_mb_m.ph2_pf = value_mb_a.ph2_pf / value_mb_a.cnt;
                            value_mb_m.ph3_pf = value_mb_a.ph3_pf / value_mb_a.cnt;
                            value_mb_m.Alive = value_mb_a.Alive / value_mb_a.cnt;

                            //console.log(value_mb_a.cnt + "개의 mb데이터가 모였다. 아래의 값이다.")
                            //console.log(value_mb_m);

                            value_mb_a = cloneobj(value_mb_z); // 누적값을 0으로 초기화한다.

                            t.ph1_volt = value_mb_m.ph1_volt;
                            t.ph2_volt = value_mb_m.ph2_volt;
                            t.ph3_volt = value_mb_m.ph3_volt;
                            t.ph1_current = value_mb_m.ph1_current;
                            t.ph2_current = value_mb_m.ph2_current;
                            t.ph3_current = value_mb_m.ph3_current;
                            t.ph1_power = value_mb_m.ph1_power;
                            t.ph2_power = value_mb_m.ph2_power;
                            t.ph3_power = value_mb_m.ph3_power;
                            t.ph1_powerVA = value_mb_m.ph1_powerVA;
                            t.ph2_powerVA = value_mb_m.ph2_powerVA;
                            t.ph3_powerVA = value_mb_m.ph3_powerVA;
                            t.ph1_amp_reactive = value_mb_m.ph1_amp_reactive;
                            t.ph2_amp_reactive = value_mb_m.ph2_amp_reactive;
                            t.ph3_amp_reactive = value_mb_m.ph3_amp_reactive;
                            t.ph1_pf = value_mb_m.ph1_pf;
                            t.ph2_pf = value_mb_m.ph2_pf;
                            t.ph3_pf = value_mb_m.ph3_pf;
                            t.update_pwmt = true;
                        }

                        if (t.update_pwmt == true || t.update_opti == true) {
                            update_minute = false;
                            t.update_pwmt = false;
                            t.update_opti = false;
                            var battery_pwr = t.Battery_voltage * t.Battery_current;
                            var ph1_load = t.ph1_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);
                            var ph2_load = t.ph2_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);
                            var ph3_load = t.ph3_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);
                            ph1_load_m = ph1_load - (t.Solar_input_power_1 / 3);
                            ph2_load_m = ph2_load - (t.Solar_input_power_1 / 3);
                            ph3_load_m = ph3_load - (t.Solar_input_power_1 / 3);

                            var dbsave = {
                                Time: t.t1.toISOString(),
                                datetime: new Date(t.t1.toISOString()),
                                Solar_input_voltage_1: Number(t.Solar_input_voltage_1.toFixed(2)),
                                Solar_input_power_1: Number(t.Solar_input_power_1.toFixed(2)),
                                Battery_voltage: Number(t.Battery_voltage.toFixed(2)),
                                Battery_capacity: Number(t.Battery_capacity.toFixed(2)),
                                Battery_current: Number(t.Battery_current.toFixed(2)),
                                Battery_Power: Number(battery_pwr.toFixed(2)),
                                Inner_temperature: Number(t.Inner_temperature.toFixed(2)),
                                External_battery_temperature: Number(t.External_battery_temperature.toFixed(2)),
                                ph1_volt: Number(t.ph1_volt.toFixed(2)),
                                ph2_volt: Number(t.ph2_volt.toFixed(2)),
                                ph3_volt: Number(t.ph3_volt.toFixed(2)),
                                ph1_current: Number(t.ph1_current.toFixed(2)),
                                ph2_current: Number(t.ph2_current.toFixed(2)),
                                ph3_current: Number(t.ph3_current.toFixed(2)),
                                ph1_power: Number(t.ph1_power.toFixed(2)),
                                ph2_power: Number(t.ph2_power.toFixed(2)),
                                ph3_power: Number(t.ph3_power.toFixed(2)),
                                ph1_powerVA: Number(t.ph1_powerVA.toFixed(2)),
                                ph2_powerVA: Number(t.ph2_powerVA.toFixed(2)),
                                ph3_powerVA: Number(t.ph3_powerVA.toFixed(2)),
                                ph1_load: Number(ph1_load.toFixed(2)),
                                ph2_load: Number(ph2_load.toFixed(2)),
                                ph3_load: Number(ph3_load.toFixed(2)),
                                ph1_amp_reactive: Number(t.ph1_amp_reactive.toFixed(2)),
                                ph2_amp_reactive: Number(t.ph2_amp_reactive.toFixed(2)),
                                ph3_amp_reactive: Number(t.ph3_amp_reactive.toFixed(2)),
                                ph1_pf: Number(t.ph1_pf.toFixed(2)),
                                ph2_pf: Number(t.ph2_pf.toFixed(2)),
                                ph3_pf: Number(t.ph3_pf.toFixed(2))
                            };
                            mdb.collection("sum_m").insertOne(dbsave, function(err, res) {
                                if (err) console.log(err);
                            });
                        }

                        //15분단위
                        if (dbsum_minute % 15 == 0) {
                            var tq = {
                                d: new Date(),
                                Solar_input_voltage_1: 0,
                                Solar_input_power_1: 0,
                                Battery_voltage: 0,
                                Battery_capacity: 0,
                                Battery_current: 0,
                                Inner_temperature: 0,
                                External_battery_temperature: 0,
                                ph1_volt: 0,
                                ph2_volt: 0,
                                ph3_volt: 0,
                                ph1_current: 0,
                                ph2_current: 0,
                                ph3_current: 0,
                                ph1_power: 0,
                                ph2_power: 0,
                                ph3_power: 0,
                                ph1_powerVA: 0,
                                ph2_powerVA: 0,
                                ph3_powerVA: 0,
                                ph1_amp_reactive: 0,
                                ph2_amp_reactive: 0,
                                ph3_amp_reactive: 0,
                                ph1_pf: 0,
                                ph2_pf: 0,
                                ph3_pf: 0,
                                update_opti: false,
                                update_pwmt: false,
                                t1: 0,
                                t2: 0,
                                qr: 0
                            };

                            var d = new Date();
                            //var index = d.getHours() * 4 + parseInt(d.getMinutes() / 15);
                            var index = d.getHours() * 60 + d.getMinutes();

                            // optisolar 분 평균을 낸다.
                            if (value_gs_aq.cnt > 0) {
                                value_gs_q.Alive = 0;

                                value_gs_q.Solar_input_voltage_1 = value_gs_aq.Solar_input_voltage_1 / value_gs_aq.cnt;
                                value_gs_q.Solar_input_voltage_2 = value_gs_aq.Solar_input_voltage_2 / value_gs_aq.cnt;
                                value_gs_q.Solar_input_current_1 = value_gs_aq.Solar_input_current_1 / value_gs_aq.cnt;
                                value_gs_q.Solar_input_current_2 = value_gs_aq.Solar_input_current_2 / value_gs_aq.cnt;
                                value_gs_q.Solar_input_power_1 = value_gs_aq.Solar_input_power_1 / value_gs_aq.cnt;
                                value_gs_q.Solar_input_power_2 = value_gs_aq.Solar_input_power_2 / value_gs_aq.cnt;
                                value_gs_q.Battery_voltage = value_gs_aq.Battery_voltage / value_gs_aq.cnt;
                                value_gs_q.Battery_capacity = value_gs_aq.Battery_capacity / value_gs_aq.cnt;
                                value_gs_q.Battery_current = value_gs_aq.Battery_current / value_gs_aq.cnt;
                                value_gs_q.AC_input_voltage_R = value_gs_aq.AC_input_voltage_R / value_gs_aq.cnt;
                                value_gs_q.AC_input_voltage_S = value_gs_aq.AC_input_voltage_S / value_gs_aq.cnt;
                                value_gs_q.AC_input_voltage_T = value_gs_aq.AC_input_voltage_T / value_gs_aq.cnt;
                                value_gs_q.AC_input_frequency = value_gs_aq.AC_input_frequency / value_gs_aq.cnt;
                                value_gs_q.AC_input_current_R = value_gs_aq.AC_input_current_R / value_gs_aq.cnt;
                                value_gs_q.AC_input_current_S = value_gs_aq.AC_input_current_S / value_gs_aq.cnt;
                                value_gs_q.AC_input_current_T = value_gs_aq.AC_input_current_T / value_gs_aq.cnt;
                                value_gs_q.AC_output_voltage_R = value_gs_aq.AC_output_voltage_R / value_gs_aq.cnt;
                                value_gs_q.AC_output_voltage_S = value_gs_aq.AC_output_voltage_S / value_gs_aq.cnt;
                                value_gs_q.AC_output_voltage_T = value_gs_aq.AC_output_voltage_T / value_gs_aq.cnt;
                                value_gs_q.AC_output_frequency = value_gs_aq.AC_output_frequency / value_gs_aq.cnt;
                                value_gs_q.AC_output_current_R = value_gs_aq.AC_output_current_R / value_gs_aq.cnt;
                                value_gs_q.AC_output_current_S = value_gs_aq.AC_output_current_S / value_gs_aq.cnt;
                                value_gs_q.AC_output_current_T = value_gs_aq.AC_output_current_T / value_gs_aq.cnt;
                                value_gs_q.Inner_temperature = value_gs_aq.Inner_temperature / value_gs_aq.cnt;
                                value_gs_q.Component_max_temperature = value_gs_aq.Component_max_temperature / value_gs_aq.cnt;
                                value_gs_q.External_battery_temperature = value_gs_aq.External_battery_temperature / value_gs_aq.cnt;



                                console.log(value_gs_aq.cnt + "개의 gs데이터가 모였다. 아래의 값이다.");
                                console.log(value_gs_q);
                                value_gs_aq = cloneobj(value_gs_z);



                                // 분단위 DB에 넣을 Temp값을 미리 넣어둔다.
                                tq.Solar_input_voltage_1 = value_gs_q.Solar_input_voltage_1;
                                tq.Solar_input_power_1 = value_gs_q.Solar_input_power_1;
                                tq.Battery_voltage = value_gs_q.Battery_voltage;
                                tq.Battery_capacity = value_gs_q.Battery_capacity;
                                tq.Battery_current = value_gs_q.Battery_current;
                                tq.Inner_temperature = value_gs_q.Inner_temperature;
                                tq.External_battery_temperature = value_gs_q.External_battery_temperature;
                                tq.update_opti = true;
                            } else {
                                console.log("opti에서 데이터를 수신하지 못했다.");
                            }

                            // modbus 파워메터 분 평균을 낸다.
                            if (value_mb_aq.cnt > 0) {
                                value_mb_q.ph1_volt = value_mb_aq.ph1_volt / value_mb_aq.cnt;
                                value_mb_q.ph2_volt = value_mb_aq.ph2_volt / value_mb_aq.cnt;
                                value_mb_q.ph3_volt = value_mb_aq.ph3_volt / value_mb_aq.cnt;
                                value_mb_q.ph1_current = value_mb_aq.ph1_current / value_mb_aq.cnt;
                                value_mb_q.ph2_current = value_mb_aq.ph2_current / value_mb_aq.cnt;
                                value_mb_q.ph3_current = value_mb_aq.ph3_current / value_mb_aq.cnt;
                                value_mb_q.ph1_power = value_mb_aq.ph1_power / value_mb_aq.cnt;
                                value_mb_q.ph2_power = value_mb_aq.ph2_power / value_mb_aq.cnt;
                                value_mb_q.ph3_power = value_mb_aq.ph3_power / value_mb_aq.cnt;
                                value_mb_q.ph1_powerVA = value_mb_aq.ph1_powerVA / value_mb_aq.cnt;
                                value_mb_q.ph2_powerVA = value_mb_aq.ph2_powerVA / value_mb_aq.cnt;
                                value_mb_q.ph3_powerVA = value_mb_aq.ph3_powerVA / value_mb_aq.cnt;
                                value_mb_q.ph1_amp_reactive = value_mb_aq.ph1_amp_reactive / value_mb_aq.cnt;
                                value_mb_q.ph2_amp_reactive = value_mb_aq.ph2_amp_reactive / value_mb_aq.cnt;
                                value_mb_q.ph3_amp_reactive = value_mb_aq.ph3_amp_reactive / value_mb_aq.cnt;
                                value_mb_q.ph1_pf = value_mb_aq.ph1_pf / value_mb_aq.cnt;
                                value_mb_q.ph2_pf = value_mb_aq.ph2_pf / value_mb_aq.cnt;
                                value_mb_q.ph3_pf = value_mb_aq.ph3_pf / value_mb_aq.cnt;
                                value_mb_q.Alive = value_mb_aq.Alive / value_mb_aq.cnt;

                                console.log(value_mb_aq.cnt + "개의 mb데이터가 모였다. 아래의 값이다.")
                                console.log(value_mb_m);

                                value_mb_aq = cloneobj(value_mb_z); // 누적값을 0으로 초기화한다.

                                tq.ph1_volt = value_mb_q.ph1_volt;
                                tq.ph2_volt = value_mb_q.ph2_volt;
                                tq.ph3_volt = value_mb_q.ph3_volt;
                                tq.ph1_current = value_mb_q.ph1_current;
                                tq.ph2_current = value_mb_q.ph2_current;
                                tq.ph3_current = value_mb_q.ph3_current;
                                tq.ph1_power = value_mb_q.ph1_power;
                                tq.ph2_power = value_mb_q.ph2_power;
                                tq.ph3_power = value_mb_q.ph3_power;
                                tq.ph1_powerVA = value_mb_q.ph1_powerVA;
                                tq.ph2_powerVA = value_mb_q.ph2_powerVA;
                                tq.ph3_powerVA = value_mb_q.ph3_powerVA;
                                tq.ph1_amp_reactive = value_mb_q.ph1_amp_reactive;
                                tq.ph2_amp_reactive = value_mb_q.ph2_amp_reactive;
                                tq.ph3_amp_reactive = value_mb_q.ph3_amp_reactive;
                                tq.ph1_pf = value_mb_q.ph1_pf;
                                tq.ph2_pf = value_mb_q.ph2_pf;
                                tq.ph3_pf = value_mb_q.ph3_pf;
                                tq.update_pwmt = true;
                            }



                            if (tq.update_pwmt == true || tq.update_opti == true) {
                                tq.update_pwmt = false;
                                tq.update_opti = false;
                                var bat_pwr = tq.Battery_voltage * tq.Battery_current;
                                var ph1load = tq.ph1_power + (tq.Solar_input_power_1 / 3) - (bat_pwr / 3);
                                var ph2load = tq.ph2_power + (tq.Solar_input_power_1 / 3) - (bat_pwr / 3);
                                var ph3load = tq.ph3_power + (tq.Solar_input_power_1 / 3) - (bat_pwr / 3);
                                tq.t1 = moment(); // 조회할 테이블 시작 시간
                                var db_save = {
                                    index: index,
                                    Time: tq.t1.toISOString(),
                                    datetime: new Date(tq.t1.toISOString()),
                                    Solar_input_voltage_1: Number(tq.Solar_input_voltage_1.toFixed(2)),
                                    Solar_input_power_1: Number(tq.Solar_input_power_1.toFixed(2)),
                                    Battery_voltage: Number(tq.Battery_voltage.toFixed(2)),
                                    Battery_capacity: Number(tq.Battery_capacity.toFixed(2)),
                                    Battery_current: Number(tq.Battery_current.toFixed(2)),
                                    Battery_Power: Number(bat_pwr.toFixed(2)),
                                    Inner_temperature: Number(tq.Inner_temperature.toFixed(2)),
                                    External_battery_temperature: Number(tq.External_battery_temperature.toFixed(2)),
                                    ph1_volt: Number(tq.ph1_volt.toFixed(2)),
                                    ph2_volt: Number(tq.ph2_volt.toFixed(2)),
                                    ph3_volt: Number(tq.ph3_volt.toFixed(2)),
                                    ph1_current: Number(tq.ph1_current.toFixed(2)),
                                    ph2_current: Number(tq.ph2_current.toFixed(2)),
                                    ph3_current: Number(tq.ph3_current.toFixed(2)),
                                    ph1_power: Number(tq.ph1_power.toFixed(2)),
                                    ph2_power: Number(tq.ph2_power.toFixed(2)),
                                    ph3_power: Number(tq.ph3_power.toFixed(2)),
                                    ph1_powerVA: Number(tq.ph1_powerVA.toFixed(2)),
                                    ph2_powerVA: Number(tq.ph2_powerVA.toFixed(2)),
                                    ph3_powerVA: Number(tq.ph3_powerVA.toFixed(2)),
                                    ph1_load: Number(ph1load.toFixed(2)),
                                    ph2_load: Number(ph2load.toFixed(2)),
                                    ph3_load: Number(ph3load.toFixed(2)),
                                    ph1_amp_reactive: Number(tq.ph1_amp_reactive.toFixed(2)),
                                    ph2_amp_reactive: Number(tq.ph2_amp_reactive.toFixed(2)),
                                    ph3_amp_reactive: Number(tq.ph3_amp_reactive.toFixed(2)),
                                    ph1_pf: Number(tq.ph1_pf.toFixed(2)),
                                    ph2_pf: Number(tq.ph2_pf.toFixed(2)),
                                    ph3_pf: Number(tq.ph3_pf.toFixed(2))
                                };
                                console.log(db_save + "를 기록한다.");
                                mdb.collection("sum_q").insertOne(db_save, function(err, res) {
                                    if (err) console.log(err);
                                });
                            }
                        } //             //15분단위 end
                    } // 현재 minute가 변경되었다면? end



                    // 시간이 변경되었을 때라면?
                    if (dbsum_hour != new Date().getHours()) {
                        dbsum_hour = new Date().getHours(); //시간 갱신
                        update_hour = true;
                        var th = {
                            d: new Date(),
                            Solar_input_voltage_1: 0,
                            Solar_input_power_1: 0,
                            Battery_voltage: 0,
                            Battery_capacity: 0,
                            Battery_current: 0,
                            Inner_temperature: 0,
                            External_battery_temperature: 0,

                            ph1_volt: 0,
                            ph2_volt: 0,
                            ph3_volt: 0,
                            ph1_current: 0,
                            ph2_current: 0,
                            ph3_current: 0,
                            ph1_power: 0,
                            ph2_power: 0,
                            ph3_power: 0,
                            ph1_powerVA: 0,
                            ph2_powerVA: 0,
                            ph3_powerVA: 0,
                            ph1_amp_reactive: 0,
                            ph2_amp_reactive: 0,
                            ph3_amp_reactive: 0,
                            ph1_pf: 0,
                            ph2_pf: 0,
                            ph3_pf: 0,
                            update_opti: false,
                            update_pwmt: false,
                            t1: 0,
                            t2: 0,
                            qr: 0
                        };

                        th.d = new Date();

                        th.update_opti = false;
                        th.update_pwmt = false;

                        th.t1 = moment(); // 조회할 테이블 시작 시간
                        th.t2 = th.t1.clone().add(-1, 'hour'); // 시작시간에서 1시간전의 시간
                        th.qr = { "datetime": { $gte: new Date(th.t2.format()), $lt: new Date(th.t1.format()) } };
                        //  sum_m조회
                        //console.log(th.qr);
                        mdb.collection('sum_m').find(th.qr).toArray(function(err, result) {
                            if (err) console.log(err); //throw err;
                            //console.log("sum m의 시간당 갯수는" + result.length);
                            if (result.length > 0) {
                                result.forEach(function(el, idx, arr) {
                                    th.Solar_input_voltage_1 += Number(el.Solar_input_voltage_1);
                                    th.Solar_input_power_1 += Number(el.Solar_input_power_1);
                                    th.Battery_voltage += Number(el.Battery_voltage);
                                    th.Battery_capacity += Number(el.Battery_capacity);
                                    th.Battery_current += Number(el.Battery_current);
                                    th.Inner_temperature += Number(el.Inner_temperature);
                                    th.External_battery_temperature += Number(el.External_battery_temperature);

                                    th.ph1_volt += Number(el.ph1_volt);
                                    th.ph2_volt += Number(el.ph2_volt);
                                    th.ph3_volt += Number(el.ph3_volt);
                                    th.ph1_current += Number(el.ph1_current);
                                    th.ph2_current += Number(el.ph2_current);
                                    th.ph3_current += Number(el.ph3_current);
                                    th.ph1_power += Number(el.ph1_power);
                                    th.ph2_power += Number(el.ph2_power);
                                    th.ph3_power += Number(el.ph3_power);
                                    th.ph1_powerVA += Number(el.ph1_powerVA);
                                    th.ph2_powerVA += Number(el.ph2_powerVA);
                                    th.ph3_powerVA += Number(el.ph3_powerVA);
                                    th.ph1_amp_reactive += Number(el.ph1_amp_reactive);
                                    th.ph2_amp_reactive += Number(el.ph2_amp_reactive);
                                    th.ph3_amp_reactive += Number(el.ph3_amp_reactive);
                                    th.ph1_pf += Number(el.ph1_pf);
                                    th.ph2_pf += Number(el.ph2_pf);
                                    th.ph3_pf += Number(el.ph3_pf);
                                });
                                th.Solar_input_voltage_1 /= result.length;
                                th.Solar_input_power_1 /= result.length;
                                th.Battery_voltage /= result.length;
                                th.Battery_capacity /= result.length;
                                th.Battery_current /= result.length;
                                th.Inner_temperature /= result.length;
                                th.External_battery_temperature /= result.length;
                                th.ph1_volt /= result.length;
                                th.ph2_volt /= result.length;
                                th.ph3_volt /= result.length;
                                th.ph1_current /= result.length;
                                th.ph2_current /= result.length;
                                th.ph3_current /= result.length;
                                th.ph1_power /= result.length;
                                th.ph2_power /= result.length;
                                th.ph3_power /= result.length;
                                th.ph1_powerVA /= result.length;
                                th.ph2_powerVA /= result.length;
                                th.ph3_powerVA /= result.length;
                                th.ph1_amp_reactive /= result.length;
                                th.ph2_amp_reactive /= result.length;
                                th.ph3_amp_reactive /= result.length;
                                th.ph1_pf /= result.length;
                                th.ph2_pf /= result.length;
                                th.ph3_pf /= result.length;
                                var battery_pwr = th.Battery_voltage * th.Battery_current;
                                var ph1_load = th.ph1_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);
                                var ph2_load = th.ph2_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);
                                var ph3_load = th.ph3_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);

                                var dbsave = {
                                    Time: th.t1.toISOString(),
                                    datetime: new Date(th.t1.toISOString()),
                                    Solar_input_voltage_1: Number(th.Solar_input_voltage_1.toFixed(2)),
                                    Solar_input_power_1: Number(th.Solar_input_power_1.toFixed(2)),
                                    Battery_voltage: Number(th.Battery_voltage.toFixed(2)),
                                    Battery_capacity: Number(th.Battery_capacity.toFixed(2)),
                                    Battery_current: Number(th.Battery_current.toFixed(2)),
                                    Battery_Power: Number(battery_pwr.toFixed(2)),
                                    ph1_volt: Number(th.ph1_volt.toFixed(2)),
                                    ph2_volt: Number(th.ph2_volt.toFixed(2)),
                                    ph3_volt: Number(th.ph3_volt.toFixed(2)),
                                    ph1_current: Number(th.ph1_current.toFixed(2)),
                                    ph2_current: Number(th.ph2_current.toFixed(2)),
                                    ph3_current: Number(th.ph3_current.toFixed(2)),
                                    ph1_power: Number(th.ph1_power.toFixed(2)),
                                    ph2_power: Number(th.ph2_power.toFixed(2)),
                                    ph3_power: Number(th.ph3_power.toFixed(2)),
                                    ph1_powerVA: Number(th.ph1_powerVA.toFixed(2)),
                                    ph2_powerVA: Number(th.ph2_powerVA.toFixed(2)),
                                    ph3_powerVA: Number(th.ph3_powerVA.toFixed(2)),
                                    ph1_load: Number(ph1_load.toFixed(2)),
                                    ph2_load: Number(ph2_load.toFixed(2)),
                                    ph3_load: Number(ph3_load.toFixed(2)),
                                    ph1_amp_reactive: Number(th.ph1_amp_reactive.toFixed(2)),
                                    ph2_amp_reactive: Number(th.ph2_amp_reactive.toFixed(2)),
                                    ph3_amp_reactive: Number(th.ph3_amp_reactive.toFixed(2)),
                                    ph1_pf: Number(th.ph1_pf.toFixed(2)),
                                    ph2_pf: Number(th.ph2_pf.toFixed(2)),
                                    ph3_pf: Number(th.ph3_pf.toFixed(2))
                                };
                                mdb.collection("sum_h").insertOne(dbsave, function(err, res) {
                                    //console.log("sumh 기록을 시작한다.");
                                    if (err) console.log(err);
                                });


                            } else {}
                        });

                    } // 시간 변경되었을 때 end

                    // 날짜가 변경되었을 때라면?
                    if (dbsum_day != new Date().getDate()) {
                        dbsum_day = new Date().getDate(); //시간 갱신
                        var td = {
                            d: new Date(),
                            Solar_input_voltage_1: 0,
                            Solar_input_power_1: 0,
                            Battery_voltage: 0,
                            Battery_capacity: 0,
                            Battery_current: 0,
                            Inner_temperature: 0,
                            External_battery_temperature: 0,

                            ph1_volt: 0,
                            ph2_volt: 0,
                            ph3_volt: 0,
                            ph1_current: 0,
                            ph2_current: 0,
                            ph3_current: 0,
                            ph1_power: 0,
                            ph2_power: 0,
                            ph3_power: 0,
                            ph1_powerVA: 0,
                            ph2_powerVA: 0,
                            ph3_powerVA: 0,
                            ph1_amp_reactive: 0,
                            ph2_amp_reactive: 0,
                            ph3_amp_reactive: 0,
                            ph1_pf: 0,
                            ph2_pf: 0,
                            ph3_pf: 0,
                            update_opti: false,
                            update_pwmt: false,
                            t1: 0,
                            t2: 0,
                            qr: 0
                        };
                        td.t1 = moment(); // 조회할 테이블 시작 시간
                        td.t2 = td.t1.clone().add(-1, 'day'); // 시작시간에서 1일 전의 시간
                        td.qr = { "datetime": { $gte: new Date(td.t2.format()), $lt: new Date(td.t1.format()) } };
                        //  sum_h조회
                        //console.log(td.qr);
                        mdb.collection('sum_h').find(td.qr).toArray(function(err, result) {
                            if (err) console.log(err); //throw err;
                            //console.log("sum h의 1일당 갯수는" + result.length);
                            if (result.length > 0) {
                                result.forEach(function(el, idx, arr) {
                                    td.Solar_input_voltage_1 += Number(el.Solar_input_voltage_1);
                                    td.Solar_input_power_1 += Number(el.Solar_input_power_1);
                                    td.Battery_voltage += Number(el.Battery_voltage);
                                    td.Battery_capacity += Number(el.Battery_capacity);
                                    td.Battery_current += Number(el.Battery_current);
                                    td.Inner_temperature += Number(el.Inner_temperature);
                                    td.External_battery_temperature += Number(el.External_battery_temperature);
                                    td.ph1_volt += Number(el.ph1_volt);
                                    td.ph2_volt += Number(el.ph2_volt);
                                    td.ph3_volt += Number(el.ph3_volt);
                                    td.ph1_current += Number(el.ph1_current);
                                    td.ph2_current += Number(el.ph2_current);
                                    td.ph3_current += Number(el.ph3_current);
                                    td.ph1_power += Number(el.ph1_power);
                                    td.ph2_power += Number(el.ph2_power);
                                    td.ph3_power += Number(el.ph3_power);
                                    td.ph1_powerVA += Number(el.ph1_powerVA);
                                    td.ph2_powerVA += Number(el.ph2_powerVA);
                                    td.ph3_powerVA += Number(el.ph3_powerVA);
                                    td.ph1_amp_reactive += Number(el.ph1_amp_reactive);
                                    td.ph2_amp_reactive += Number(el.ph2_amp_reactive);
                                    td.ph3_amp_reactive += Number(el.ph3_amp_reactive);
                                    td.ph1_pf += Number(el.ph1_pf);
                                    td.ph2_pf += Number(el.ph2_pf);
                                    td.ph3_pf += Number(el.ph3_pf);
                                });

                                td.Solar_input_voltage_1 /= result.length;
                                td.Solar_input_power_1 /= result.length;
                                td.Battery_voltage /= result.length;
                                td.Battery_capacity /= result.length;
                                td.Battery_current /= result.length;
                                td.Inner_temperature /= result.length;
                                td.External_battery_temperature /= result.length;
                                td.ph1_volt /= result.length;
                                td.ph2_volt /= result.length;
                                td.ph3_volt /= result.length;
                                td.ph1_current /= result.length;
                                td.ph2_current /= result.length;
                                td.ph3_current /= result.length;
                                td.ph1_power /= result.length;
                                td.ph2_power /= result.length;
                                td.ph3_power /= result.length;
                                td.ph1_powerVA /= result.length;
                                td.ph2_powerVA /= result.length;
                                td.ph3_powerVA /= result.length;
                                td.ph1_amp_reactive /= result.length;
                                td.ph2_amp_reactive /= result.length;
                                td.ph3_amp_reactive /= result.length;
                                td.ph1_pf /= result.length;
                                td.ph2_pf /= result.length;
                                td.ph3_pf /= result.length;
                                var battery_pwr = th.Battery_voltage * th.Battery_current;
                                var ph1_load = th.ph1_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);
                                var ph2_load = th.ph2_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);
                                var ph3_load = th.ph3_power + (th.Solar_input_power_1 / 3) - (battery_pwr / 3);

                                var dbsave = {
                                    Time: th.t1.toISOString(),
                                    datetime: new Date(td.t1.toISOString()),
                                    Solar_input_voltage_1: Number(th.Solar_input_voltage_1.toFixed(2)),
                                    Solar_input_power_1: Number(th.Solar_input_power_1.toFixed(2)),
                                    Battery_voltage: Number(th.Battery_voltage.toFixed(2)),
                                    Battery_capacity: Number(th.Battery_capacity.toFixed(2)),
                                    Battery_current: Number(th.Battery_current.toFixed(2)),
                                    Battery_Power: Number(battery_pwr.toFixed(2)),
                                    ph1_volt: Number(th.ph1_volt.toFixed(2)),
                                    ph2_volt: Number(th.ph2_volt.toFixed(2)),
                                    ph3_volt: Number(th.ph3_volt.toFixed(2)),
                                    ph1_current: Number(th.ph1_current.toFixed(2)),
                                    ph2_current: Number(th.ph2_current.toFixed(2)),
                                    ph3_current: Number(th.ph3_current.toFixed(2)),
                                    ph1_power: Number(th.ph1_power.toFixed(2)),
                                    ph2_power: Number(th.ph2_power.toFixed(2)),
                                    ph3_power: Number(th.ph3_power.toFixed(2)),
                                    ph1_powerVA: Number(th.ph1_powerVA.toFixed(2)),
                                    ph2_powerVA: Number(th.ph2_powerVA.toFixed(2)),
                                    ph3_powerVA: Number(th.ph3_powerVA.toFixed(2)),
                                    ph1_load: Number(ph1_load.toFixed(2)),
                                    ph2_load: Number(ph2_load.toFixed(2)),
                                    ph3_load: Number(ph3_load.toFixed(2)),
                                    ph1_amp_reactive: Number(th.ph1_amp_reactive.toFixed(2)),
                                    ph2_amp_reactive: Number(th.ph2_amp_reactive.toFixed(2)),
                                    ph3_amp_reactive: Number(th.ph3_amp_reactive.toFixed(2)),
                                    ph1_pf: Number(th.ph1_pf.toFixed(2)),
                                    ph2_pf: Number(th.ph2_pf.toFixed(2)),
                                    ph3_pf: Number(th.ph3_pf.toFixed(2))
                                };
                                mdb.collection("sum_d").insertOne(dbsave, function(err, res) {
                                    //console.log("sumd 기록을 시작한다.");
                                    if (err) console.log(err);
                                });

                            } else {}
                        });
                    } // 날짜 변경되었을 때 end


                    /*
                    if (t.update_pwmt == true && t.update_opti == true && update_minute == true) {
                        update_minute = false;
                        t.update_pwmt = false;
                        t.update_opti = false;
                        var battery_pwr = t.Battery_voltage * t.Battery_current;
                        var ph1_load = t.ph1_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);
                        var ph2_load = t.ph2_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);
                        var ph3_load = t.ph3_power + (t.Solar_input_power_1 / 3) - (battery_pwr / 3);

                        var dbsave = {
                            Time: t.t1.toISOString(),
                            datetime: new Date(t.t1.toISOString()),
                            Solar_input_voltage_1: t.Solar_input_voltage_1,
                            Solar_input_power_1: t.Solar_input_power_1,
                            Battery_voltage: t.Battery_voltage,
                            Battery_capacity: t.Battery_capacity,
                            Battery_current: t.Battery_current,
                            Battery_Power: battery_pwr,
                            ph1_volt: t.ph1_volt,
                            ph2_volt: t.ph2_volt,
                            ph3_volt: t.ph3_volt,
                            ph1_current: t.ph1_current,
                            ph2_current: t.ph2_current,
                            ph3_current: t.ph3_current,
                            ph1_power: t.ph1_power,
                            ph2_power: t.ph2_power,
                            ph3_power: t.ph3_power,
                            ph1_powerVA: t.ph1_powerVA,
                            ph2_powerVA: t.ph2_powerVA,
                            ph3_powerVA: t.ph3_powerVA,
                            ph1_load: ph1_load,
                            ph2_load: ph2_load,
                            ph3_load: ph3_load,
                            ph1_amp_reactive: t.ph1_amp_reactive,
                            ph2_amp_reactive: t.ph2_amp_reactive,
                            ph3_amp_reactive: t.ph3_amp_reactive,
                            ph1_pf: t.ph1_pf,
                            ph2_pf: t.ph2_pf,
                            ph3_pf: t.ph3_pf
                        };
                        mdb.collection("sum_m").insertOne(dbsave, function(err, res) {
                            if (err) console.log(err);
                        });
                    }
                    */

                } catch (err) {
                    console.log(err);
                }
            }, 1000);


            // 고정폭 길이의 숫자 문자열을 만든다. 고정폭은 3
            function zerofil(val) {
                return ('000' + Number(val)).substr(-3);
            }
            // 고정폭 길이의 숫자 문자열을 만든다. 고정폭은 2
            function zerofil2(val) {
                return ('00' + Number(val)).substr(-2);
            }
            // 고정폭 길이의 숫자 문자열을 만든다. 고정폭은 6
            function zerofil4(val) {
                return ('0000' + Number(val)).substr(-4);
            }
            // 고정폭 길이의 숫자 문자열을 만든다. 고정폭은 6
            function zerofil6(val) {
                return ('000000' + Number(val)).substr(-6);
            }

            // checksum 정수 반환
            function checksum(str) {
                var i;
                var chk = 0;
                for (i = 0; i < str.length; i++) {
                    chk += str.charCodeAt(i);
                }
                return chk & 0xff;
            }


            function cloneobj(obj) {
                if (obj === null || typeof(obj) !== 'object')
                    return obj;
                var copy = obj.constructor();
                for (var attr in obj) {
                    if (obj.hasOwnProperty(attr)) {
                        copy[attr] = obj[attr];
                    }
                }
                return copy;
            }